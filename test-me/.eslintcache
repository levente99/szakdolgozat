[{"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\index.tsx":"1","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\reportWebVitals.ts":"2","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\App.tsx":"3","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Home\\Home.tsx":"4","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\common\\Navigation.tsx":"5","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\MyTests.tsx":"6","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\Gameboy\\Gameboy.tsx":"7","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Authentication\\Authentication.tsx":"8","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CreateTest\\CreateTest.tsx":"9","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\CompleteTest.tsx":"10","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\Question\\Question.tsx":"11","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\QuestionType\\QuestionType.tsx":"12","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\Results\\Results.tsx":"13"},{"size":331,"mtime":1616873762087,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1012,"mtime":1618508815640,"results":"17","hashOfConfig":"15"},{"size":4793,"mtime":1618509903261,"results":"18","hashOfConfig":"15"},{"size":2798,"mtime":1618511845603,"results":"19","hashOfConfig":"15"},{"size":4607,"mtime":1618429836663,"results":"20","hashOfConfig":"15"},{"size":2435,"mtime":1617632595711,"results":"21","hashOfConfig":"15"},{"size":16494,"mtime":1618508695471,"results":"22","hashOfConfig":"15"},{"size":22961,"mtime":1618049304426,"results":"23","hashOfConfig":"15"},{"size":7087,"mtime":1618049306529,"results":"24","hashOfConfig":"15"},{"size":9922,"mtime":1617984551749,"results":"25","hashOfConfig":"15"},{"size":1720,"mtime":1617637073755,"results":"26","hashOfConfig":"15"},{"size":5728,"mtime":1617984711680,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ho9eh0",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\index.tsx",[],["63","64"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\reportWebVitals.ts",[],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\App.tsx",["65","66"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Home\\Home.tsx",["67","68"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\common\\Navigation.tsx",["69","70"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\MyTests.tsx",["71","72","73"],"import React, { Component } from 'react';\r\nimport { Dropdown, DropdownButton, Spinner } from 'react-bootstrap';\r\nimport { Scrollbars } from 'react-custom-scrollbars-2';\r\nimport { Gameboy } from './Gameboy/Gameboy';\r\nimport configData from '../../config.json';\r\nimport './MyTests.css';\r\n\r\nexport default class MyTests extends Component {\r\n    state = {\r\n        userId: \"\",\r\n        usersTests: [\r\n            {\r\n                id: 0,\r\n                user: {\r\n                    firstName: \"\",\r\n                    lastName: \"\",\r\n                },\r\n                test: {\r\n                    id: \"\",\r\n                    description: \"\",\r\n                    title: \"\",\r\n                    created: \"\",\r\n                    deadline: \"\",\r\n                    questions: [\r\n                        {\r\n                            \"timeLimit\": 0,\r\n                            \"xp\": 0\r\n                        }\r\n                    ]\r\n                },\r\n                finished: \"\",\r\n                earnedXp: 0\r\n            }\r\n        ],\r\n        order: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`${configData.SERVER_URL}/users/fetch-from-session`, {\r\n            method: 'GET', credentials: \"include\",\r\n            mode: 'cors'\r\n        }).then(function (body) {\r\n            return body.text();\r\n        }).then((response) => {\r\n            this.setState({ userId: response });\r\n            fetch(`${configData.SERVER_URL}/users-tests/${response}`, {\r\n                method: 'GET',\r\n            })\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    this.setState({ usersTests: response });\r\n                })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var userTestCopy = [...this.state.usersTests];\r\n        const orderedTests = () => {\r\n            switch (this.state.order) {\r\n                case 0:\r\n                    userTestCopy.sort((a, b) => a.test.created < b.test.created ? 1 : -1);\r\n                    break;\r\n                case 1:\r\n                    userTestCopy.sort((a, b) => a.test.created > b.test.created ? 1 : -1);\r\n                    break;\r\n                case 2:\r\n                    userTestCopy.sort((a, b) => a.finished != null ? 1 : -1);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return userTestCopy.map((userTest, i) =>\r\n                <Gameboy\r\n                    key={i}\r\n                    id={userTest.test.id}\r\n                    testName={userTest.test.title}\r\n                    firstName={userTest.user.firstName}\r\n                    lastName={userTest.user.lastName}\r\n                    createdTime={userTest.test.created.split('T')[0]}\r\n                    deadline={userTest.test.deadline.split('T')[0]}\r\n                    earnedXp={userTest.earnedXp}\r\n                    finished={userTest.finished}\r\n                    testTime={this.convertSecToMin(userTest.test.questions.reduce(function (a, b) {\r\n                        return +a + +b.timeLimit;\r\n                    }, 0))}\r\n                    questionNumber={userTest?.test?.questions?.length}\r\n                    xp={userTest.test.questions.reduce(function (a, b) {\r\n                        return +a + +b.xp;\r\n                    }, 0)}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            this.state.userId == \"\" ? <div className=\"alert alert-danger\" role=\"alert\">Jelentkezz be ha meg szeretnéd nézni a tesztjeidet!</div> :\r\n                this.state.usersTests.length == 0 ? <div className=\"alert alert-success\" role=\"alert\">Nincsennek tesztek</div> :\r\n                    <div className=\"mytests-container\">\r\n                        <DropdownButton id=\"mytests-dropdown-button\" title=\"Rendezés\">\r\n                            <Dropdown.Item onClick={() => this.setState({ order: 0 })}>Legújabb</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.setState({ order: 1 })}>Legrégebbi</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.setState({ order: 2 })}>Kitöltetlenek</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <div className=\"gameboys-container\">\r\n                            <Scrollbars>\r\n                                {orderedTests()}\r\n                            </Scrollbars>\r\n                        </div>\r\n                    </div>\r\n        )\r\n    }\r\n\r\n    convertSecToMin(value: number): string {\r\n        return Math.floor(value / 60) + \":\" + (value % 60 ? value % 60 : '00')\r\n    }\r\n\r\n}","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\Gameboy\\Gameboy.tsx",["74"],"import React, { ReactNode } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Gameboy.css\";\r\n\r\ninterface GameboyProps {\r\n    id: string;\r\n    testName: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    createdTime: string;\r\n    deadline: string;\r\n    testTime: string;\r\n    questionNumber: number;\r\n    xp: number;\r\n    finished: string;\r\n    earnedXp: number;\r\n}\r\n\r\nexport const Gameboy: React.FC<GameboyProps> = ({ id, testName, firstName, lastName, createdTime, deadline, testTime, questionNumber, xp, finished, earnedXp }: GameboyProps) => {\r\n    return (\r\n        <div className={finished == null ? \"gameboy\" : \"gameboy finished-gameboy-color\"}>\r\n            <div className=\"screen-cont\">\r\n                <div className=\"screen\">\r\n                    <div className=\"header\"></div>\r\n                    <div className=\"test-name\">{testName}</div>\r\n                    <div className=\"test-name\">{firstName + \" \" + lastName}</div>\r\n                    {finished == null ? null : <div className=\"gameboy-earned-xp-number\">{earnedXp}</div>}\r\n                    <div className=\"test-create-dates\">Kiírva: {createdTime}</div>\r\n                    <div className=\"test-deadline\">Kitöltési határidő: {deadline}</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"controls-cont\">\r\n                <div className=\"btn-direction\">\r\n                    <div className=\"vertical\"></div>\r\n                    <div className=\"horizontal\"></div>\r\n                    <div className=\"stopwatch-icon\">⏱️</div>\r\n                    <div className=\"test-time\">{testTime}</div>\r\n                </div>\r\n                <div className=\"btn-AB\">\r\n                    <div className=\"question-number\">{questionNumber}</div>\r\n                    <div className=\"question-number-label\">Kérdések</div>\r\n                    <div className=\"xp-number\">{xp}</div>\r\n                    <div className=\"xp-number-label\">XP</div>\r\n                </div>\r\n                <div className=\"btn-select\"></div>\r\n                {finished == null ? <Link to={`/play/${id}`} className=\"btn-start\" /> : <div className=\"btn-start-finished\" />}\r\n\r\n                <div className=\"btn-start-label\">Kezdés</div>\r\n            </div>\r\n            <div className=\"speakers\"></div>\r\n            <div className=\"on-off\">off-on</div>\r\n            <div className=\"phones\">phones</div>\r\n        </div>\r\n    );\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Authentication\\Authentication.tsx",["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98"],"import React, { Component } from 'react';\r\nimport { Alert, Form, Spinner } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport configData from '../../config.json';\r\nimport Navigation from '../common/Navigation';\r\nimport './Authentication.css';\r\n\r\ninterface LoginProps {\r\n}\r\n\r\ninterface LoginState {\r\n    loginValue: {\r\n        userName: string;\r\n        password: string;\r\n        loginError: string;\r\n        loggedIn: boolean;\r\n    },\r\n    registerValue: {\r\n        userRole: string;\r\n        userName: string;\r\n        firstName: string;\r\n        lastName: string;\r\n        email: string;\r\n        password: string;\r\n        registerMessage: string;\r\n    }\r\n    loginSignupSwap: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nexport default class Login extends Component<LoginProps, LoginState> {\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loginValue: {\r\n                userName: '',\r\n                password: '',\r\n                loggedIn: false,\r\n                loginError: ''\r\n            },\r\n            registerValue: {\r\n                userRole: 'Diák',\r\n                userName: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                password: '',\r\n                registerMessage: ''\r\n            },\r\n            loginSignupSwap: false,\r\n            loading: false\r\n        }\r\n\r\n        this.saveInputChange = this.saveInputChange.bind(this);\r\n    }\r\n\r\n    saveInputChange(e: { currentTarget: { value: any; }; preventDefault: () => void; target: { name: any; value: any; }; }) {\r\n        const { name, value } = e.target;\r\n\r\n        e.preventDefault();\r\n        if ((e.target as HTMLInputElement).id == 'teacher' || (e.target as HTMLInputElement).id == 'student' || (e.target as HTMLInputElement).id == 'firstName' || (e.target as HTMLInputElement).id == 'lastName' || (e.target as HTMLInputElement).id == 'SignUpInputEmail' || (e.target as HTMLInputElement).id == 'SignUpInputUsername' || (e.target as HTMLInputElement).id == 'SignUpInputPassword' || (e.target as HTMLInputElement).id == 'userRole') {\r\n            this.setState((prevState) => ({ registerValue: { ...prevState.registerValue, [name]: value } }));\r\n        }\r\n        else if ((e.target as HTMLInputElement).id == 'SignInInputUsername' || (e.target as HTMLInputElement).id == 'SignInInputPassword') {\r\n            this.setState((prevState) => ({ loginValue: { ...prevState.loginValue, [name]: value } }));\r\n        }\r\n    }\r\n\r\n    getUserId = async () => {\r\n        let userId = await fetch(`${configData.SERVER_URL}/users/get-user-id?username=${this.state.loginValue.userName}&password=${this.state.loginValue.password}`).then(function (body) {\r\n            return body.text();\r\n        }).then(function (response) {\r\n            return response;\r\n        });\r\n        return userId;\r\n    }\r\n\r\n    submitLogin = async () => {\r\n        if (this.state.loginValue.userName.length == 0 || this.state.loginValue.password.length == 0) {\r\n            this.setState(prevState => ({\r\n                loginValue: {\r\n                    ...prevState.loginValue,\r\n                    loginError: \"Kérlek tölts ki minden mezőt!\"\r\n                }\r\n            }))\r\n        } else {\r\n            this.setState(prevState => ({\r\n                loginValue: {\r\n                    ...prevState.loginValue,\r\n                    loginError: \"\"\r\n                }\r\n            }))\r\n            this.setState({ ...this.state, loading: true });\r\n            await fetch(`${configData.SERVER_URL}/login`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    mode: 'cors',\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    userName: this.state.loginValue.userName,\r\n                    password: this.state.loginValue.password\r\n                })\r\n            }).then(async data => {\r\n                switch (data.status) {\r\n                    case 403:\r\n                        this.setState(prevState => ({\r\n                            loginValue: {\r\n                                ...prevState.loginValue,\r\n                                loginError: \"Kérlek igazold vissza az email címed.\"\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case 500:\r\n                        this.setState(prevState => ({\r\n                            loginValue: {\r\n                                ...prevState.loginValue,\r\n                                loginError: \"Rossz felhasználónév vagy jelszó!\"\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case 200:\r\n                        await this.getUserId().then(async function (userId) {\r\n                            fetch(`${configData.SERVER_URL}/users/save-to-session?userId=${userId}`, {\r\n                                method: 'GET',\r\n                                credentials: 'include'\r\n                            });\r\n                        })\r\n                        this.setState(prevState => ({\r\n                            loginValue: {\r\n                                ...prevState.loginValue,\r\n                                loggedIn: true\r\n                            }\r\n                        }));\r\n                        break;\r\n                }\r\n\r\n                await this.setState(prevState => ({\r\n                    loading: false\r\n                }));\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    submitSignin = async () => {\r\n        if (this.state.registerValue.email.length == 0 ||\r\n            this.state.registerValue.firstName.length == 0 ||\r\n            this.state.registerValue.lastName.length == 0 ||\r\n            this.state.registerValue.password.length == 0 ||\r\n            this.state.registerValue.userName.length == 0) {\r\n            this.setState(prevState => ({\r\n                registerValue: {\r\n                    ...prevState.registerValue,\r\n                    registerMessage: \"Kérlek tölts ki minden mezőt!\"\r\n                }\r\n            }));\r\n        } else if (!this.validateEmail(this.state.registerValue.email)) {\r\n            this.setState(prevState => ({\r\n                registerValue: {\r\n                    ...prevState.registerValue,\r\n                    registerMessage: \"Helytelen e-mail cím!\"\r\n                }\r\n            }));\r\n        } else {\r\n\r\n            this.setState({ ...this.state, loading: true });\r\n            await fetch(`${configData.SERVER_URL}/register`, {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                cache: 'no-cache',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                redirect: 'follow',\r\n                referrerPolicy: 'no-referrer',\r\n                body: JSON.stringify({\r\n                    RoleId: this.state.registerValue.userRole == \"Diák\" ? 1 : 0,\r\n                    FirstName: this.state.registerValue.firstName,\r\n                    LastName: this.state.registerValue.lastName,\r\n                    UserName: this.state.registerValue.userName,\r\n                    Email: this.state.registerValue.email,\r\n                    Password: this.state.registerValue.password\r\n                })\r\n            }).then(function (body) {\r\n                return body.json();\r\n            }).then((response) => {\r\n                if (!response.succeeded) {\r\n                    this.setState(prevState => ({\r\n                        registerValue: {\r\n                            ...prevState.registerValue,\r\n                            registerMessage: response.errors.Password == undefined ? response.errors[0].description : response.errors.Password[0]\r\n                        }\r\n                    }));\r\n                } else {\r\n                    this.setState(prevState => ({\r\n                        registerValue: {\r\n                            ...prevState.registerValue,\r\n                            registerMessage: \"Sikers regisztráció, igazold vissza az e-mail címed és jelentkezz be!\"\r\n                        }\r\n                    }));\r\n                    this.changeContainer();\r\n                }\r\n            });\r\n            await this.setState(prevState => ({\r\n                loading: false\r\n            }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loginValue.loggedIn) {\r\n            return <Redirect to={{ pathname: `/` }} />\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Navigation renderNav={false} />\r\n                <div className=\"login-background\">\r\n                    <div className={this.state.loginSignupSwap ? \"right-panel-active container\" : \"container\"} id=\"container\">\r\n                        <div className=\"form-container sign-up-container\">\r\n                            <form className=\"login-form\">\r\n                                <h2 className=\"login-title mb-2\">Regisztrálj! 📝</h2>\r\n\r\n                                <div className=\"btn-group btn-group-toggle text-left m-2\" style={{ fontSize: '30px' }}>\r\n                                    <label className={this.state.registerValue.userRole == 'Tanár' ? 'btn btn-primary active' : 'btn btn-primary'}>\r\n                                        <div style={{ fontSize: '30px' }}>👩‍🏫</div>\r\n                                        <input type=\"radio\" name=\"userRole\" id=\"teacher\" value=\"Tanár\" onChange={this.saveInputChange} />Tanár\r\n                                </label>\r\n                                    <label className={this.state.registerValue.userRole == 'Diák' ? 'btn btn-primary active' : 'btn btn-primary'}>\r\n                                        <div style={{ fontSize: '30px' }}>👨‍🎓</div>\r\n                                        <input type=\"radio\" name=\"userRole\" id=\"student\" value=\"Diák\" onChange={this.saveInputChange} />Diák\r\n                                </label>\r\n                                </div>\r\n                                <label htmlFor=\"firstName\">Vezetéknév és Keresztnév</label>\r\n                                <div className=\"input-group\">\r\n                                    <input className=\"form-control input-sm\" id=\"firstName\" placeholder=\"Vezetéknév\" name=\"firstName\" onChange={this.saveInputChange} />\r\n                                    <span className=\"input-group-btn\" style={{ width: '0px' }}></span>\r\n                                    <input className=\"form-control input-sm\" id=\"lastName\" placeholder=\"Keresztnév\" name=\"lastName\" onChange={this.saveInputChange} />\r\n                                </div>\r\n                                <div className=\"form-group text-left mt-3\">\r\n                                    <label htmlFor=\"SignUpInputUsername\">Felhasználónév</label>\r\n                                    <input className=\"form-control\" id=\"SignUpInputUsername\" name=\"userName\" onChange={this.saveInputChange} placeholder=\"Felhasználónév\" />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <label htmlFor=\"SignUpInputEmail\">E-mail</label>\r\n                                    <input type=\"email\" className=\"form-control\" id=\"SignUpInputEmail\" aria-describedby=\"emailHelp\" name=\"email\" onChange={this.saveInputChange} placeholder=\"E-mail\" />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <label htmlFor=\"SignUpInputPassword\">Jelszó</label>\r\n                                    <input type=\"password\" className=\"form-control\" id=\"SignUpInputPassword\" name=\"password\" onChange={this.saveInputChange} placeholder=\"Jelszó\" />\r\n                                </div>\r\n                                {this.state.loading ? <Spinner animation=\"border\" role=\"status\">\r\n                                    <span className=\"sr-only\">Loading...</span>\r\n                                </Spinner> :\r\n                                    <button type=\"button\" onClick={this.submitSignin} className=\"btn btn-success\">Regisztráció</button>\r\n                                }\r\n                            </form>\r\n                        </div>\r\n                        <Form className=\"form-container sign-in-container\">\r\n                            <Form.Group className=\"login-form\">\r\n                                <h2 className=\"login-title mb-5\">Jelentkezz be! 🔓</h2>\r\n\r\n                                <Form.Group className=\"form-group text-left\">\r\n                                    <label htmlFor=\"SignInInputUsername\">Felhasználónév</label>\r\n                                    <Form.Control type=\"input\" id=\"SignInInputUsername\" name=\"userName\" onChange={this.saveInputChange} placeholder=\"Felhasználónév\" />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-group text-left\">\r\n                                    <label htmlFor=\"SignInInputPassword\">Jelszó</label>\r\n                                    <Form.Control type=\"password\" id=\"SignInInputPassword\" name=\"password\" onChange={this.saveInputChange} placeholder=\"Jelszó\" />\r\n                                </Form.Group>\r\n                                {this.state.loading ? <Spinner animation=\"border\" role=\"status\">\r\n                                    <span className=\"sr-only\">Loading...</span>\r\n                                </Spinner> :\r\n                                    <button type=\"button\" onClick={this.submitLogin} className=\"btn btn-success\">Bejelentkezés</button>\r\n                                }\r\n                            </Form.Group>\r\n                        </Form>\r\n                        <div className=\"overlay-container\">\r\n                            <div className=\"overlay\">\r\n                                <div className=\"overlay-panel overlay-left\">\r\n                                    {this.state.registerValue.registerMessage != \"\" ? <Alert color=\"danger\" style={{ backgroundColor: '#75000a' }}>\r\n                                        {this.state.registerValue.registerMessage}\r\n                                    </Alert> : null}\r\n                                    <h1 className=\"login-title\">Üdv újra itt!</h1>\r\n                                    <p>Ahhoz hogy hozzáférj a tesztjeidhez kérlek jelentkezz be!</p>\r\n                                    <button className=\"login-button.ghost login-button\" onClick={() => this.changeContainer()} id=\"signIn\">Bejelentkezés</button>\r\n                                </div>\r\n                                <div className=\"overlay-panel overlay-right\">\r\n                                    {this.state.loginValue.loginError != \"\" ? <Alert color=\"danger\" style={{ backgroundColor: '#75000a' }}>\r\n                                        {this.state.loginValue.loginError}\r\n                                    </Alert> : null}\r\n                                    {this.state.registerValue.registerMessage == \"Sikers regisztráció, igazold vissza az e-mail címed és jelentkezz be!\" ? <Alert color=\"danger\" style={{ backgroundColor: '#218838' }}>\r\n                                        {this.state.registerValue.registerMessage}\r\n                                    </Alert> : null}\r\n                                    <h1 className=\"login-title\">Üdv itt!</h1>\r\n                                    <p>Add meg az adataidat és már kezdheted is a teszt készítést!</p>\r\n                                    <button className=\"login-button.ghost login-button\" onClick={() => this.changeContainer()} id=\"signUp\">Regisztráció</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEmail(email: string) {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n    changeContainer() {\r\n        this.setState({ loginSignupSwap: !this.state.loginSignupSwap })\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CreateTest\\CreateTest.tsx",["99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"import React, { Component } from 'react'\r\nimport { Button, Form, OverlayTrigger, Popover, Image, Modal, ListGroup, Row, Col, Spinner } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport configData from '../../config.json';\r\nimport './CreateTest.css';\r\n\r\ninterface CreateTestProps {\r\n}\r\n\r\ninterface CreateTestState {\r\n    description: string;\r\n    userId: string;\r\n    title: string;\r\n    created: string;\r\n    deadline: string;\r\n    questions: [\r\n        {\r\n            id: number\r\n            problem: string;\r\n            answerOne: string;\r\n            answerTwo: string;\r\n            answerThree?: string;\r\n            answerFour?: string;\r\n            timeLimit: number;\r\n            xp: number;\r\n            correctAnswer: number;\r\n        }\r\n    ],\r\n    editedQuestion: number;\r\n    saveModalIsOpen: boolean;\r\n    userToFill: string;\r\n    fillingUsers: string[];\r\n    savingTest: boolean;\r\n    createdTest: boolean;\r\n}\r\n\r\nexport default class CreateTest extends Component<CreateTestProps, CreateTestState> {\r\n\r\n    constructor(props: CreateTestProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            description: '',\r\n            userId: '',\r\n            title: '',\r\n            created: '',\r\n            deadline: '',\r\n            questions: [\r\n                {\r\n                    id: 0,\r\n                    problem: '',\r\n                    answerOne: '',\r\n                    answerTwo: '',\r\n                    answerThree: '',\r\n                    answerFour: '',\r\n                    timeLimit: 0,\r\n                    xp: 0,\r\n                    correctAnswer: 0\r\n                },\r\n            ],\r\n            editedQuestion: 0,\r\n            saveModalIsOpen: false,\r\n            userToFill: '',\r\n            fillingUsers: [],\r\n            savingTest: false,\r\n            createdTest: false\r\n        }\r\n\r\n        this.createTrueFalseQuestion = this.createTrueFalseQuestion.bind(this);\r\n        this.handleQuestionInputs = this.handleQuestionInputs.bind(this);\r\n        this.chooseQuestionToEdit = this.chooseQuestionToEdit.bind(this);\r\n        this.createQuizQuestion = this.createQuizQuestion.bind(this);\r\n        this.addUsersToTheTest = this.addUsersToTheTest.bind(this);\r\n        this.handleSaveInputs = this.handleSaveInputs.bind(this);\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n        this.deleteUser = this.deleteUser.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`${configData.SERVER_URL}/users/fetch-from-session`, { method: 'GET', credentials: \"include\", mode: 'cors' }).then(function (body) {\r\n            return body.text();\r\n        }).then((response) => {\r\n            this.setState({ userId: response });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.createdTest) {\r\n            return <Redirect to='/' />;\r\n        }\r\n        const selectQuestionType = (\r\n            <Popover id=\"popover\" >\r\n                <Popover.Title as=\"h3\">Milyen típusú kérdés legyen?</Popover.Title>\r\n                <Popover.Content>\r\n                    <Form.Group>\r\n                        <Button className=\"new-question-button w-75\" onClick={this.createQuizQuestion} variant=\"outline-primary\">\r\n                            <Image src=\"/img/quiz_icon.png\" />\r\n                            <p className=\"font-weight-bold\">Kvíz</p>\r\n                            <p>Adj a játékosoknak több válaszlehetőséget, amelyek közül választhatnak</p>\r\n                        </Button>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button className=\"new-question-button w-75\" onClick={this.createTrueFalseQuestion} variant=\"outline-primary\">\r\n                            <Image src=\"/img/true_false_icon.png\" />\r\n                            <p className=\"font-weight-bold\">Igaz-hamis</p>\r\n                            <p>Engedd hogy a játékos döntse el, hogy az állítás igaz vagy hamis</p>\r\n                        </Button>\r\n                    </Form.Group>\r\n\r\n                </Popover.Content>\r\n            </Popover>\r\n        );\r\n\r\n        const questionList = (\r\n            this.state.questions[0].problem.length > 0 || this.state.questions.length > 1 ?\r\n                this.state.questions.map((item, index) => (\r\n                    <div data-key={item.id} onClick={() => this.chooseQuestionToEdit(item.id)} style={{\r\n                        backgroundColor: this.state.editedQuestion == item.id ? '#2b92ff' : 'white',\r\n                    }} className=\"question-list-item\" >\r\n                        <img src=\"/img/trash.png\" width=\"25\" style={{ cursor: 'pointer' }} onClick={() => this.deleteQuestion(index)} />\r\n                        <div data-key={item.id} className=\"question-item-content\" style={{\r\n                            backgroundColor: this.state.editedQuestion == item.id ? 'white' : '#e0efff',\r\n                        }}>\r\n                            <p data-key={item.id} className=\"sidebar-question-number\">{index + 1}</p>\r\n                            <p data-key={item.id} className=\"question-type\">{item.hasOwnProperty(\"answerThree\") ? \"Kvíz\" : \"Igaz-hamis\"}</p>\r\n                            <p data-key={item.id} className=\"font-weight-bold item-question-text\">{item.problem}</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                ))\r\n                : <div data-key=\"0\" onClick={this.chooseQuestionToEdit} style={{ backgroundColor: '#2b92ff' }} className=\"question-list-item\">\r\n                    <img src=\"/img/trash.png\" width=\"25\" style={{ cursor: 'pointer' }} onClick={() => this.deleteQuestion(0)} />\r\n                    <div data-key=\"0\" className=\"question-item-content\" style={{ backgroundColor: 'white' }}>\r\n                        <p data-key=\"0\" className=\"sidebar-question-number\">1</p>\r\n                        <p data-key=\"0\" className=\"question-type\">Kvíz</p>\r\n                        <p data-key=\"0\" className=\"font-weight-bold mt-2\">{this.state.questions[0].problem}</p>\r\n\r\n                    </div>\r\n                </div>\r\n        )\r\n\r\n        return (\r\n            this.state.userId == \"\" ? <div className=\"alert alert-danger\" role=\"alert\">Jelentkezz be hogy tesztet készíthess!</div> :\r\n                <div className=\"edit-container full-height\">\r\n                    <div className=\"sidebar-container\">\r\n                        <div className=\"sidebar\">\r\n                            {questionList}\r\n                            <Form.Group>\r\n                                <OverlayTrigger\r\n                                    rootClose={true} trigger=\"click\" placement=\"right\" overlay={selectQuestionType}>\r\n                                    <Button className=\"new-question-button w-75\" variant=\"primary\">Új kérdés</Button>\r\n                                </OverlayTrigger>\r\n                            </Form.Group>\r\n                        </div>\r\n\r\n                        <Form.Group className=\"save-exit-button w-100\">\r\n                            <Button className=\"cancel-test-button\" variant=\"danger\" onClick={() => this.setState({ createdTest: true })}>Kilépés</Button>\r\n                            <Button variant=\"success\" onClick={this.openModal}> Mentés</Button>{' '}\r\n                        </Form.Group>\r\n                    </div>\r\n\r\n                    <div className=\"create\">\r\n                        <Form.Group className=\"question-text\">\r\n                            <Form.Control type=\"text\" onChange={(e) => { this.handleQuestionInputs(e) }} name=\"problem\" id=\"question-text-input\" placeholder=\"Írd ide a kérdésed...\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.problem}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <div className=\"question-details\">\r\n                            <Form.Group className=\"time-limit\" controlId=\"formBasicRange\">\r\n                                <Form.Label className=\"time-label\">Idő: </Form.Label>\r\n                                <Form.Label className=\"time-number-label\">{this.state.questions.find(q => q.id == this.state.editedQuestion)?.timeLimit}</Form.Label>\r\n                                <Form.Control min=\"5\" max=\"200\" size=\"lg\" step={5} name=\"timeLimit\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.timeLimit} onChange={(e) => this.handleQuestionInputs(e)} type=\"range\" />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"question-xp\" controlId=\"formBasicRange\">\r\n                                <Form.Label className=\"xp-label\">Xp: </Form.Label>\r\n                                <Form.Label className=\"xp-slider-number-label\">{this.state.questions.find(q => q.id == this.state.editedQuestion)?.xp}</Form.Label>\r\n                                <Form.Control min=\"0\" max=\"1000\" size=\"sm\" step={100} name=\"xp\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.xp} onChange={(e) => this.handleQuestionInputs(e)} type=\"range\" />\r\n                            </Form.Group>\r\n                        </div>\r\n\r\n                        {this.state.questions.find(q => q.id == this.state.editedQuestion)?.hasOwnProperty(\"answerThree\") ?\r\n                            <Form.Group className=\"answers\">\r\n                                <Form.Group className=\"answers-one\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerOne} name=\"answerOne\" placeholder=\"Első válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 0 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"0\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-two\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerTwo} name=\"answerTwo\" placeholder=\"Második válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 1 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"1\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-three\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} name=\"answerThree\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerThree} placeholder=\"Harmadik válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 2 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"2\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-four\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} name=\"answerFour\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerFour} placeholder=\"Negyedik válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 3 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"3\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form.Group> :\r\n                            <Form.Group className=\"answers\">\r\n                                <Form.Group className=\"answers-one\">\r\n                                    <Form.Label className=\"answers-true-label\">Igaz</Form.Label>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 0 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"0\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-two\">\r\n                                    <Form.Label className=\"answers-false-label\">Hamis</Form.Label>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 1 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"1\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form.Group>\r\n                        }\r\n                    </div>\r\n\r\n                    <Modal\r\n                        show={this.state.saveModalIsOpen}\r\n                        size=\"lg\"\r\n                        aria-labelledby=\"contained-modal-title-vcenter\"\r\n                        centered\r\n                        onHide={this.closeModal}\r\n                    >\r\n                        <Modal.Header closeButton >\r\n                            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                Teszt mentése\r\n                        </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Teszt címe:</Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" placeholder=\"Cím\" onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"user-email-input\">\r\n                                        <Form.Label>Kitöltők hozzáadása:</Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"userToFill\" value={this.state.userToFill} placeholder=\"E-mail cím\" onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                        <Button variant=\"success\" className=\"add-user-button\" onClick={this.addUsersToTheTest}> Hozzáadás</Button>{' '}\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"test-date-input\">\r\n                                        <Form.Label>Kitöltési határidő:</Form.Label>\r\n                                        <Form.Control type=\"date\" name='deadline' onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Leírás</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} name='description' onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col className=\"added-users\">\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item variant=\"primary\">Hozzáadott felhasználók:</ListGroup.Item>\r\n                                        {this.state.fillingUsers.map((item, index) => (\r\n                                            <ListGroup.Item>{item} <img\r\n                                                src=\"/img/trash.png\"\r\n                                                width=\"25\"\r\n                                                // data-key={index}\r\n                                                style={{ float: 'right', cursor: 'pointer' }}\r\n                                                onClick={() => this.deleteUser(index)}\r\n                                            /></ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            {this.state.savingTest ? <Spinner animation=\"border\" role=\"status\">\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                            </Spinner> :\r\n                                <>\r\n                                    <Button onClick={this.closeModal}>Bezárás</Button>\r\n                                    <Button variant=\"success\" onClick={() => this.saveTest()}>Mentés</Button>\r\n                                </>\r\n                            }\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </div >\r\n        )\r\n    }\r\n\r\n    openModal = () => this.setState({ saveModalIsOpen: true });\r\n    closeModal = () => this.setState({ saveModalIsOpen: false });\r\n\r\n    createQuizQuestion() {\r\n        this.state.questions.push({\r\n            id: Math.max.apply(Math, this.state.questions.map(function (o) { return o.id; })) + 1,\r\n            problem: '',\r\n            answerOne: '',\r\n            answerTwo: '',\r\n            answerThree: '',\r\n            answerFour: '',\r\n            timeLimit: 0,\r\n            xp: 0,\r\n            correctAnswer: 0\r\n        })\r\n\r\n        document.body.click()\r\n        this.forceUpdate();\r\n    }\r\n\r\n    createTrueFalseQuestion() {\r\n        this.state.questions.push({\r\n            id: Math.max.apply(Math, this.state.questions.map(function (o) { return o.id; })) + 1,\r\n            problem: '',\r\n            answerOne: '',\r\n            answerTwo: '',\r\n            timeLimit: 0,\r\n            xp: 0,\r\n            correctAnswer: 0\r\n        })\r\n\r\n        document.body.click()\r\n        this.forceUpdate();\r\n    }\r\n\r\n    chooseQuestionToEdit(id: any) {\r\n        try {\r\n            this.setState({ editedQuestion: id });\r\n        } catch (error) {\r\n            this.setState({ editedQuestion: this.state.questions[0].id });\r\n        }\r\n        this.forceUpdate();\r\n\r\n    }\r\n\r\n    deleteQuestion(arg: any) {\r\n        var questions: any = [...this.state.questions]; // make a separate copy of the array\r\n        questions.splice(arg, 1);\r\n        this.setState({ questions: questions });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    deleteUser(arg: any) {\r\n        var array = [...this.state.fillingUsers]; // make a separate copy of the array\r\n        array.splice(arg, 1);\r\n        this.setState({ fillingUsers: array });\r\n\r\n    }\r\n\r\n    slidebarQuestions() {\r\n        if (this.state.questions[0].problem != \"\") {\r\n            return (\r\n                this.state.questions.map(q =>\r\n                    <div className=\"question-list-item\">\r\n                        {q.problem}\r\n                    </div>\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    addUsersToTheTest() {\r\n        this.setState(previousState => ({\r\n            fillingUsers: [...previousState.fillingUsers, this.state.userToFill],\r\n            userToFill: \"\"\r\n        }));\r\n    }\r\n\r\n    handleSaveInputs(e: { target: { name: any; value: any; }; }) {\r\n        const { name, value } = e.target;\r\n\r\n        const newState = { [name]: value } as Pick<CreateTestState, keyof CreateTestState>;\r\n        this.setState(newState);\r\n    }\r\n\r\n    handleQuestionInputs(e: { currentTarget: { value: any; }; preventDefault: () => void; target: { name: string | number; value: string | number; id: string | number } }) {\r\n        const { name, value, id } = e.target;\r\n\r\n        if (value == \"on\") {\r\n            var questions: any = [...this.state.questions];\r\n            questions.find((q: { id: number; }) => q.id == this.state.editedQuestion).correctAnswer = id;\r\n        } else {\r\n            var questions: any = [...this.state.questions];\r\n            questions.find((q: { id: number; }) => q.id == this.state.editedQuestion)[name] = value;\r\n        }\r\n        this.setState({ questions });\r\n    }\r\n\r\n    async saveTest() {\r\n        this.setState({ ...this.state, savingTest: true });\r\n        let questions = this.state.questions.map(({ id, ...keepAttrs }) => keepAttrs)\r\n\r\n        await fetch(`${configData.SERVER_URL}/tests`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                UserId: this.state.userId,\r\n                Title: this.state.title,\r\n                Description: this.state.description,\r\n                Questions: questions,\r\n                Deadline: this.state.deadline\r\n            })\r\n        }).then(response => {\r\n            if (response.ok) return response.json();\r\n        }).then(async json => {\r\n            await this.state.fillingUsers.forEach(async (email) => {\r\n                await fetch(`${configData.SERVER_URL}/users-tests`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        User: {\r\n                            Email: email\r\n                        },\r\n                        TestId: json.id\r\n                    })\r\n\r\n                });\r\n            });\r\n            this.setState({ ...this.state, savingTest: false, createdTest: true });\r\n        })\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\CompleteTest.tsx",["132","133","134"],"import './CompleteTest.css';\r\nimport React, { Component } from 'react'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport QuestionType from './QuestionType/QuestionType';\r\nimport Question from './Question/Question';\r\nimport configData from '../../config.json';\r\nimport Results from './Results/Results';\r\n\r\ninterface CompleteTestProps {\r\n}\r\n\r\ninterface answer {\r\n    responseTime: number;\r\n    userAnswer: number;\r\n}\r\n\r\ninterface CompleteTestState {\r\n    userTest: {\r\n        id: string;\r\n        test: {\r\n            id: string;\r\n            description: string;\r\n            userId: string;\r\n            title: string;\r\n            created: string;\r\n            deadline: string;\r\n            questions: [\r\n                {\r\n                    id: number\r\n                    problem: string;\r\n                    answerOne: string;\r\n                    answerTwo: string;\r\n                    answerThree?: string;\r\n                    answerFour?: string;\r\n                    timeLimit: number;\r\n                    xp: number;\r\n                    correctAnswer: number;\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    answers: answer[],\r\n    showTitle: boolean,\r\n    showQuestions: boolean,\r\n    showResults: boolean,\r\n    showedQuestion: number,\r\n    showQuestionType: boolean,\r\n    allEarnedXp: number,\r\n}\r\n\r\nexport default class CompleteTest extends React.Component<CompleteTestProps, CompleteTestState> {\r\n\r\n    constructor(props: CompleteTestProps) {\r\n        super(props);\r\n        this.state = {\r\n            userTest: {\r\n                id: '',\r\n                test: {\r\n                    id: '',\r\n                    description: '',\r\n                    userId: '',\r\n                    title: '',\r\n                    created: '',\r\n                    deadline: '',\r\n                    questions: [\r\n                        {\r\n                            id: 0,\r\n                            problem: '',\r\n                            answerOne: '',\r\n                            answerTwo: '',\r\n                            answerThree: '',\r\n                            answerFour: '',\r\n                            timeLimit: 0,\r\n                            xp: 0,\r\n                            correctAnswer: 0\r\n                        },\r\n                    ]\r\n                }\r\n            },\r\n            answers: [],\r\n            showTitle: false,\r\n            showQuestions: false,\r\n            showQuestionType: false,\r\n            showResults: false,\r\n            showedQuestion: 0,\r\n            allEarnedXp: 0\r\n        }\r\n\r\n        this.getNextQuestion = this.getNextQuestion.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await fetch(`${configData.SERVER_URL}/users/fetch-from-session`, {\r\n            method: 'GET', credentials: \"include\",\r\n            mode: 'cors'\r\n        }).then(function (body) {\r\n            return body.text();\r\n        }).then((response) => {\r\n            fetch(`${configData.SERVER_URL}/users-tests/${response}/${window.location.href.substring(window.location.href.lastIndexOf('/') + 1)}`, {\r\n                method: 'GET'\r\n            })\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    this.setState({ userTest: response[0] });\r\n                })\r\n        });\r\n\r\n        this.setState({ showQuestionType: true });\r\n        await this.showQuestionTypeTimeout();\r\n        this.setState({ showQuestionType: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.showResults ? <Results testId={this.state.userTest.test.id} /> :\r\n                this.state.showedQuestion < this.state.userTest.test.questions.length ?\r\n                    this.state.showQuestionType ?\r\n                        <QuestionType\r\n                            problem={this.state.userTest.test.questions[this.state.showedQuestion].problem}\r\n                            isQuestionQuiz={this.state.userTest.test.questions[this.state.showedQuestion].answerFour == null ? true : false}\r\n                        /> :\r\n                        this.state.userTest.test.title != '' ? <Question\r\n                            id={this.state.userTest.test.questions[this.state.showedQuestion].id}\r\n                            questionNumber={this.state.showedQuestion}\r\n                            problem={this.state.userTest.test.questions[this.state.showedQuestion].problem}\r\n                            answerOne={this.state.userTest.test.questions[this.state.showedQuestion].answerOne}\r\n                            answerTwo={this.state.userTest.test.questions[this.state.showedQuestion].answerTwo}\r\n                            answerThree={this.state.userTest.test.questions[this.state.showedQuestion].answerThree}\r\n                            answerFour={this.state.userTest.test.questions[this.state.showedQuestion].answerFour}\r\n                            timeLimit={this.state.userTest.test.questions[this.state.showedQuestion].timeLimit}\r\n                            xp={this.state.userTest.test.questions[this.state.showedQuestion].xp}\r\n                            correctAnswer={this.state.userTest.test.questions[this.state.showedQuestion].correctAnswer}\r\n                            passAnswerData={this.getNextQuestion}\r\n                        /> : null\r\n                    : <Spinner animation=\"border\" variant=\"primary\" className=\"centered-big-spinner\" />\r\n        )\r\n    }\r\n\r\n    async getNextQuestion(answer: number, questionNumber: number, responseTime: number, earnedXp: number) {\r\n        this.setState({ showQuestionType: true });\r\n        this.setState({ answers: this.state.answers.concat({ responseTime: responseTime, userAnswer: answer }), allEarnedXp: this.state.allEarnedXp + earnedXp, showedQuestion: this.state.showedQuestion + 1 })\r\n\r\n        await this.showQuestionTypeTimeout();\r\n        if (this.state.showedQuestion == this.state.userTest.test.questions.length) {\r\n            await this.sendResults();\r\n            this.setState({ showResults: true });\r\n        }\r\n        this.setState({ showQuestionType: false });\r\n    }\r\n\r\n    sendResults = async () => {\r\n        await fetch(`${configData.SERVER_URL}/users-tests/${this.state.userTest.id}/update-xp/${this.state.allEarnedXp}`, {\r\n            method: 'PUT'\r\n        }).then(() => {\r\n            this.state.answers.forEach(async (answer, index) => {\r\n                await fetch(`${configData.SERVER_URL}/answers`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        QuestionId: this.state.userTest.test.questions[index].id,\r\n                        UsersTestId: this.state.userTest.id,\r\n                        ResponseTime: answer.responseTime,\r\n                        UserAnswer: answer.userAnswer\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    showQuestionTypeTimeout = () => {\r\n        return new Promise(res => setTimeout(res, 3000));\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\Question\\Question.tsx",["135","136","137","138","139","140","141","142","143","144","145"],"import React, { Component, useEffect } from 'react'\r\nimport { Alert, Form } from 'react-bootstrap';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport confetti from 'canvas-confetti';\r\nimport './Question.css';\r\n\r\ninterface QuestionProps {\r\n    id: number;\r\n    questionNumber: number;\r\n    problem: string;\r\n    answerOne: string;\r\n    answerTwo: string;\r\n    answerThree?: string;\r\n    answerFour?: string;\r\n    timeLimit: number;\r\n    xp: number;\r\n    correctAnswer: number;\r\n    passAnswerData: (answer: number, questionId: number, responseTime: number, earnedXp: number) => void;\r\n}\r\n\r\ninterface QuestionState {\r\n    secondsLeft: number;\r\n    responseTime: number;\r\n    earnedXp: number;\r\n    disableClick: boolean;\r\n    questionBgColors: string[];\r\n}\r\n\r\nexport default class Question extends React.Component<QuestionProps, QuestionState> {\r\n    constructor(prop: QuestionProps) {\r\n        super(prop);\r\n\r\n        this.state = {\r\n            //                 answer 1   answer 2   answer 3   answer 4   background\r\n            questionBgColors: [\"#66a3ff\", \"#FF6868\", \"#FFAB2C\", \"#68C95C\", \"#e0efff\"],\r\n            secondsLeft: -1,\r\n            responseTime: -1,\r\n            earnedXp: 0,\r\n            disableClick: false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: { problem: string; }) {\r\n        this.setState({ secondsLeft: this.props.timeLimit });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"flex\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"none\";\r\n        this.setState({ secondsLeft: this.props.timeLimit });\r\n\r\n        let intervalId = setInterval(() => {\r\n            const { secondsLeft } = this.state\r\n\r\n            if (secondsLeft > 0) {\r\n                this.setState({ secondsLeft: secondsLeft - 1 });\r\n            } else if (secondsLeft == 0) {\r\n                this.timeOut();\r\n                clearInterval(intervalId);\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    render() {\r\n        const { problem, answerOne, answerTwo, answerThree, answerFour, timeLimit, xp, correctAnswer } = this.props;\r\n\r\n\r\n        return (\r\n            <div style={{ backgroundColor: this.state.questionBgColors[4] }} className=\"create question-container\">\r\n                <Form.Group className=\"question-text\">\r\n                    <Form.Label>\r\n                        {problem}\r\n                    </Form.Label>\r\n                    <Form.Group className=\"asnwer-result popout\">\r\n                        {this.state.earnedXp > 0 ? <><Alert className=\"good-result\" variant=\"success\">\r\n                            <p>Helyes válasz!</p>\r\n                            <p>{this.state.earnedXp} XP</p>\r\n                        </Alert> </> : null}\r\n\r\n                        {this.state.earnedXp == -1 ? <Alert className=\"bad-result-text\" variant=\"danger\">\r\n                            Rossz válasz 😞\r\n                    </Alert> : null}\r\n                    </Form.Group>\r\n                </Form.Group >\r\n\r\n\r\n                <div className=\"question-details\">\r\n                    <Form.Group className=\"time-limit\" controlId=\"formBasicRange\">\r\n                        <Form.Label className=\"time-label\">\r\n                            {this.state.disableClick == false ? <CountdownCircleTimer\r\n                                isPlaying\r\n                                duration={this.props.timeLimit}\r\n                                colors={[\r\n                                    ['#004777', 0.33],\r\n                                    ['#F7B801', 0.33],\r\n                                    ['#A30000', 0.33],\r\n                                ]}>\r\n                                {({ remainingTime }) => remainingTime}\r\n                            </CountdownCircleTimer> : null}\r\n\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                </div>\r\n\r\n                {\r\n                    answerFour != null ?\r\n                        <Form.Group className=\"answers\">\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[0] }} className=\"play-answers-one\" id=\"0\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answer-text\">{answerOne}</Form.Label>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[1] }} className=\"play-answers-two\" id=\"1\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answer-text\">{answerTwo}</Form.Label>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[2] }} className=\"play-answers-three\" id=\"2\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answer-text\">{answerThree}</Form.Label>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[3] }} className=\"play-answers-four\" id=\"3\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answer-text\">{answerFour}</Form.Label>\r\n                            </Form.Group>\r\n                        </Form.Group> :\r\n                        <Form.Group className=\"answers\">\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[0] }} className=\"play-answers-one\" id=\"0\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answers-true-label\">Igaz</Form.Label>\r\n                            </Form.Group>\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[1] }} className=\"play-answers-two\" id=\"1\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answers-false-label\">Hamis</Form.Label>\r\n                            </Form.Group>\r\n                        </Form.Group>\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n\r\n    handleAnswerInput = async (e: React.MouseEvent<HTMLElement>) => {\r\n        const { correctAnswer } = this.props;\r\n        const { disableClick } = this.state;\r\n        this.setState({ disableClick: true });\r\n        if (!disableClick) {\r\n            if (+((e.target as HTMLTextAreaElement).id) != correctAnswer) {\r\n                this.badAnswer(+((e.target as HTMLTextAreaElement).id))\r\n            } else {\r\n                this.goodAnswer(+((e.target as HTMLTextAreaElement).id));\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    async timeOut() {\r\n        const { questionNumber } = this.props;\r\n        this.setState({ disableClick: true, earnedXp: -1 });\r\n\r\n        const newquestionBgColors = this.state.questionBgColors.slice()\r\n        for (let i = 0; i < this.state.questionBgColors.length - 1; i++) {\r\n            newquestionBgColors[i] = \"#ff1919\"\r\n        }\r\n        newquestionBgColors[this.props.correctAnswer] = \"#09bd57\"\r\n        newquestionBgColors[4] = \"#ffb8b8\"\r\n        this.setState({ questionBgColors: newquestionBgColors })\r\n\r\n        await this.afterQuestionTimeout();\r\n        this.props.passAnswerData(-1, questionNumber, -1, 0);\r\n    }\r\n\r\n    async badAnswer(answer: number) {\r\n        const { questionNumber } = this.props;\r\n        this.setState({ responseTime: this.props.timeLimit - this.state.secondsLeft, disableClick: true, earnedXp: -1 });\r\n        this.setState({ secondsLeft: -1 });\r\n\r\n        const newquestionBgColors = this.state.questionBgColors.slice()\r\n        for (let i = 0; i < this.state.questionBgColors.length - 1; i++) {\r\n            newquestionBgColors[i] = \"#ff1919\"\r\n        }\r\n        newquestionBgColors[answer] = \"#ff9494\";\r\n        newquestionBgColors[this.props.correctAnswer] = \"#09bd57\"\r\n        newquestionBgColors[4] = \"#ffb8b8\"\r\n        this.setState({ questionBgColors: newquestionBgColors })\r\n\r\n        await this.afterQuestionTimeout();\r\n        this.props.passAnswerData(answer, questionNumber, this.state.responseTime, 0);\r\n    }\r\n\r\n    async goodAnswer(answer: number) {\r\n        const { questionNumber, timeLimit, xp } = this.props;\r\n        const { secondsLeft, questionBgColors } = this.state;\r\n\r\n        this.setState({ disableClick: true });\r\n        let earnedXp = this.props.timeLimit - this.state.secondsLeft == -1 || this.props.timeLimit - this.state.secondsLeft == 0 ? xp : Math.floor((((timeLimit - secondsLeft) / timeLimit) / 2) * xp);\r\n\r\n        this.setState({ earnedXp: earnedXp });\r\n        this.setState({ responseTime: this.props.timeLimit - this.state.secondsLeft });\r\n        this.setState({ secondsLeft: -1 });\r\n\r\n        const newquestionBgColors = questionBgColors.slice()\r\n        for (let i = 0; i < questionBgColors.length - 1; i++) {\r\n            newquestionBgColors[i] = \"#ff1919\"\r\n        }\r\n        newquestionBgColors[answer] = \"#09bd57\"\r\n        newquestionBgColors[4] = \"#e8ffea\"\r\n        this.setState({ questionBgColors: newquestionBgColors })\r\n\r\n        this.tossConfetti()\r\n        await this.afterQuestionTimeout();\r\n        this.props.passAnswerData(answer, questionNumber, this.state.responseTime, earnedXp)\r\n    }\r\n\r\n    afterQuestionTimeout = () => {\r\n        return new Promise(res => setTimeout(res, 3000));\r\n    }\r\n\r\n\r\n    tossConfetti = () => {\r\n        confetti({\r\n            spread: 50,\r\n            startVelocity: 55,\r\n        });\r\n        confetti({\r\n            spread: 80,\r\n        });\r\n        confetti({\r\n            spread: 120,\r\n            startVelocity: 25,\r\n            decay: 0.92,\r\n            scalar: 1.2\r\n        });\r\n        confetti({\r\n            spread: 150,\r\n            decay: 0.91,\r\n            scalar: 0.8\r\n        });\r\n    }\r\n}","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\QuestionType\\QuestionType.tsx",["146","147","148"],"import React from 'react'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport './QuestionType.css';\r\n\r\ninterface QuestionTypeProps {\r\n    problem: string;\r\n    isQuestionQuiz: boolean;\r\n}\r\n\r\n\r\nexport default class extends React.Component<QuestionTypeProps>{\r\n    componentDidMount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"none\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"flex\";\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"question-type-container\" >\r\n                <div className=\"question-type-wrap\">\r\n                    <div className=\"question-type-img\">\r\n                        {this.props.isQuestionQuiz ? <img src=\"/img/quiz_icon.png\" /> : <img src=\"/img/true_false_icon.png\" />}\r\n                    </div>\r\n                    <div className=\"question-type-text\">\r\n                        {this.props.problem}\r\n                    </div>\r\n                    <div className=\"question-type-timer\">\r\n                        <CountdownCircleTimer\r\n                            isPlaying\r\n                            duration={3}\r\n                            colors={[\r\n                                ['#004777', 0.33],\r\n                                ['#F7B801', 0.33],\r\n                                ['#A30000', 0.33],\r\n                            ]}>\r\n                            {({ remainingTime }) => remainingTime}\r\n                        </CountdownCircleTimer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\Results\\Results.tsx",["149"],"import React, { Component } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport configData from '../../../config.json';\r\nimport confetti from 'canvas-confetti';\r\nimport './Results.css';\r\n\r\ninterface ResultsProps {\r\n    testId: string\r\n}\r\n\r\ninterface userTest {\r\n    earnedXp: number;\r\n    user: {\r\n        userName: string;\r\n    }\r\n}\r\n\r\ninterface ResultsState {\r\n    userTests: userTest[];\r\n}\r\n\r\nexport default class Results extends Component<ResultsProps, ResultsState> {\r\n\r\n    constructor(props: ResultsProps) {\r\n        super(props);\r\n        this.state = {\r\n            userTests: [\r\n                {\r\n                    earnedXp: 0,\r\n                    user: {\r\n                        userName: \"\"\r\n                    }\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"none\";\r\n        fetch(`${configData.SERVER_URL}/users-tests/test/${this.props.testId}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({ userTests: data });\r\n                this.tossConfetti();\r\n            });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"flex\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"results-background\">\r\n                    <div className=\"podium-charts-full-width\">\r\n                        <Link to=\"/\" className=\"go-home-button\">Kilépés</Link>\r\n                        <div className=\"podium-charts-container-center\">\r\n                            <div className=\"podium-charts-container\">\r\n                                <div data-functional-selector=\"place-1\" className=\"first-podium-container\">\r\n                                    <div data-functional-selector=\"winner\" className=\"first-podium-name-wrap\">\r\n                                        <div font-size=\"5.8\" data-functional-selector=\"player-name\" className=\"first-podium-name\">{this.state.userTests[0].user.userName}</div>\r\n                                    </div>\r\n                                    <div data-functional-selector=\"ranking-medal-gold\" className=\"first-podium-img\">🥇</div>\r\n                                    <div data-functional-selector=\"total-score\" className=\"first-podium-xp\">{this.state.userTests[0].earnedXp}</div>\r\n                                </div>\r\n                                <div data-functional-selector=\"place-2\" className=\"second-podium-container\">\r\n                                    <div data-functional-selector=\"winner\" className=\"second-podium-name-wrap\">\r\n                                        <div font-size=\"5.8\" data-functional-selector=\"player-name\" className=\"second-podium-name\">{this.state?.userTests[1]?.user?.userName}</div>\r\n                                    </div>\r\n                                    <div data-functional-selector=\"ranking-medal-silver\" className=\"second-podium-img\">🥈</div>\r\n                                    <div data-functional-selector=\"total-score\" className=\"second-podium-xp\">{this.state.userTests[1]?.earnedXp}</div>\r\n                                </div>\r\n                                <div data-functional-selector=\"place-3\" className=\"third-podium-container\">\r\n                                    <div data-functional-selector=\"winner\" className=\"third-podium-name-wrap\">\r\n                                        <div font-size=\"5.8\" data-functional-selector=\"player-name\" className=\"third-podium-name\">{this.state.userTests[2]?.user?.userName}</div>\r\n                                    </div>\r\n                                    <div data-functional-selector=\"ranking-medal-gold\" className=\"third-podium-img\">🥉</div>\r\n                                    <div data-functional-selector=\"total-score\" className=\"third-podium-xp\">{this.state.userTests[2]?.earnedXp}</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"table-container\">\r\n                        <ul className=\"responsive-table\">\r\n                            <li className=\"table-header\">\r\n                                <div className=\"col col-1\">#</div>\r\n                                <div className=\"col col-2\">Felhasználónév</div>\r\n                                <div className=\"col col-3\">XP</div>\r\n                            </li>\r\n                            {this.state.userTests.slice(3,).map((userTest, index) => {\r\n                                return <li className=\"table-row\">\r\n                                    <div className=\"col col-1\">{index + 3}</div>\r\n                                    <div className=\"col col-2\">{userTest.user.userName}</div>\r\n                                    <div className=\"col col-3\">{userTest.earnedXp}</div>\r\n                                </li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    tossConfetti = () => {\r\n        confetti({\r\n            particleCount: 100,\r\n            angle: 60,\r\n            spread: 55,\r\n            origin: { x: 0 },\r\n            colors: ['#FFD700'],\r\n            decay: 0.94,\r\n            scalar: 1.2\r\n        });\r\n        confetti({\r\n            particleCount: 100,\r\n            angle: 120,\r\n            spread: 55,\r\n            origin: { x: 1 },\r\n            colors: ['#FFD700'],\r\n            decay: 0.94,\r\n            scalar: 1.2\r\n        });\r\n    }\r\n}\r\n\r\n",{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":14,"column":35,"nodeType":"156","messageId":"157","endLine":14,"endColumn":37},{"ruleId":"154","severity":1,"message":"155","line":14,"column":70,"nodeType":"156","messageId":"157","endLine":14,"endColumn":72},{"ruleId":"158","severity":1,"message":"159","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":26},{"ruleId":"154","severity":1,"message":"155","line":84,"column":44,"nodeType":"156","messageId":"157","endLine":84,"endColumn":46},{"ruleId":"154","severity":1,"message":"155","line":27,"column":24,"nodeType":"156","messageId":"157","endLine":27,"endColumn":26},{"ruleId":"162","severity":1,"message":"163","line":53,"column":33,"nodeType":"164","endLine":53,"endColumn":142},{"ruleId":"158","severity":1,"message":"165","line":2,"column":36,"nodeType":"160","messageId":"161","endLine":2,"endColumn":43},{"ruleId":"154","severity":1,"message":"155","line":95,"column":31,"nodeType":"156","messageId":"157","endLine":95,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":96,"column":46,"nodeType":"156","messageId":"157","endLine":96,"endColumn":48},{"ruleId":"158","severity":1,"message":"166","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":26},{"ruleId":"154","severity":1,"message":"155","line":63,"column":47,"nodeType":"156","messageId":"157","endLine":63,"endColumn":49},{"ruleId":"154","severity":1,"message":"155","line":63,"column":97,"nodeType":"156","messageId":"157","endLine":63,"endColumn":99},{"ruleId":"154","severity":1,"message":"155","line":63,"column":147,"nodeType":"156","messageId":"157","endLine":63,"endColumn":149},{"ruleId":"154","severity":1,"message":"155","line":63,"column":199,"nodeType":"156","messageId":"157","endLine":63,"endColumn":201},{"ruleId":"154","severity":1,"message":"155","line":63,"column":250,"nodeType":"156","messageId":"157","endLine":63,"endColumn":252},{"ruleId":"154","severity":1,"message":"155","line":63,"column":309,"nodeType":"156","messageId":"157","endLine":63,"endColumn":311},{"ruleId":"154","severity":1,"message":"155","line":63,"column":371,"nodeType":"156","messageId":"157","endLine":63,"endColumn":373},{"ruleId":"154","severity":1,"message":"155","line":63,"column":433,"nodeType":"156","messageId":"157","endLine":63,"endColumn":435},{"ruleId":"154","severity":1,"message":"155","line":66,"column":52,"nodeType":"156","messageId":"157","endLine":66,"endColumn":54},{"ruleId":"154","severity":1,"message":"155","line":66,"column":114,"nodeType":"156","messageId":"157","endLine":66,"endColumn":116},{"ruleId":"154","severity":1,"message":"155","line":81,"column":51,"nodeType":"156","messageId":"157","endLine":81,"endColumn":53},{"ruleId":"154","severity":1,"message":"155","line":81,"column":97,"nodeType":"156","messageId":"157","endLine":81,"endColumn":99},{"ruleId":"154","severity":1,"message":"155","line":151,"column":51,"nodeType":"156","messageId":"157","endLine":151,"endColumn":53},{"ruleId":"154","severity":1,"message":"155","line":152,"column":55,"nodeType":"156","messageId":"157","endLine":152,"endColumn":57},{"ruleId":"154","severity":1,"message":"155","line":153,"column":54,"nodeType":"156","messageId":"157","endLine":153,"endColumn":56},{"ruleId":"154","severity":1,"message":"155","line":154,"column":54,"nodeType":"156","messageId":"157","endLine":154,"endColumn":56},{"ruleId":"154","severity":1,"message":"155","line":155,"column":54,"nodeType":"156","messageId":"157","endLine":155,"endColumn":56},{"ruleId":"154","severity":1,"message":"155","line":183,"column":63,"nodeType":"156","messageId":"157","endLine":183,"endColumn":65},{"ruleId":"154","severity":1,"message":"155","line":197,"column":71,"nodeType":"156","messageId":"157","endLine":197,"endColumn":73},{"ruleId":"154","severity":1,"message":"155","line":231,"column":89,"nodeType":"156","messageId":"157","endLine":231,"endColumn":91},{"ruleId":"154","severity":1,"message":"155","line":235,"column":89,"nodeType":"156","messageId":"157","endLine":235,"endColumn":91},{"ruleId":"154","severity":1,"message":"167","line":287,"column":79,"nodeType":"156","messageId":"157","endLine":287,"endColumn":81},{"ruleId":"154","severity":1,"message":"167","line":295,"column":71,"nodeType":"156","messageId":"157","endLine":295,"endColumn":73},{"ruleId":"154","severity":1,"message":"155","line":298,"column":79,"nodeType":"156","messageId":"157","endLine":298,"endColumn":81},{"ruleId":"154","severity":1,"message":"155","line":118,"column":68,"nodeType":"156","messageId":"157","endLine":118,"endColumn":70},{"ruleId":"162","severity":1,"message":"163","line":120,"column":25,"nodeType":"164","endLine":120,"endColumn":137},{"ruleId":"154","severity":1,"message":"155","line":122,"column":72,"nodeType":"156","messageId":"157","endLine":122,"endColumn":74},{"ruleId":"162","severity":1,"message":"163","line":132,"column":21,"nodeType":"164","endLine":132,"endColumn":129},{"ruleId":"154","severity":1,"message":"155","line":143,"column":31,"nodeType":"156","messageId":"157","endLine":143,"endColumn":33},{"ruleId":"154","severity":1,"message":"155","line":164,"column":225,"nodeType":"156","messageId":"157","endLine":164,"endColumn":227},{"ruleId":"154","severity":1,"message":"155","line":171,"column":112,"nodeType":"156","messageId":"157","endLine":171,"endColumn":114},{"ruleId":"154","severity":1,"message":"155","line":172,"column":144,"nodeType":"156","messageId":"157","endLine":172,"endColumn":146},{"ruleId":"154","severity":1,"message":"155","line":176,"column":117,"nodeType":"156","messageId":"157","endLine":176,"endColumn":119},{"ruleId":"154","severity":1,"message":"155","line":177,"column":140,"nodeType":"156","messageId":"157","endLine":177,"endColumn":142},{"ruleId":"154","severity":1,"message":"155","line":181,"column":62,"nodeType":"156","messageId":"157","endLine":181,"endColumn":64},{"ruleId":"154","severity":1,"message":"155","line":184,"column":145,"nodeType":"156","messageId":"157","endLine":184,"endColumn":147},{"ruleId":"154","severity":1,"message":"155","line":187,"column":86,"nodeType":"156","messageId":"157","endLine":187,"endColumn":88},{"ruleId":"154","severity":1,"message":"155","line":187,"column":131,"nodeType":"156","messageId":"157","endLine":187,"endColumn":133},{"ruleId":"154","severity":1,"message":"155","line":194,"column":145,"nodeType":"156","messageId":"157","endLine":194,"endColumn":147},{"ruleId":"154","severity":1,"message":"155","line":197,"column":86,"nodeType":"156","messageId":"157","endLine":197,"endColumn":88},{"ruleId":"154","severity":1,"message":"155","line":197,"column":131,"nodeType":"156","messageId":"157","endLine":197,"endColumn":133},{"ruleId":"154","severity":1,"message":"155","line":204,"column":164,"nodeType":"156","messageId":"157","endLine":204,"endColumn":166},{"ruleId":"154","severity":1,"message":"155","line":207,"column":86,"nodeType":"156","messageId":"157","endLine":207,"endColumn":88},{"ruleId":"154","severity":1,"message":"155","line":207,"column":131,"nodeType":"156","messageId":"157","endLine":207,"endColumn":133},{"ruleId":"154","severity":1,"message":"155","line":214,"column":163,"nodeType":"156","messageId":"157","endLine":214,"endColumn":165},{"ruleId":"154","severity":1,"message":"155","line":217,"column":86,"nodeType":"156","messageId":"157","endLine":217,"endColumn":88},{"ruleId":"154","severity":1,"message":"155","line":217,"column":131,"nodeType":"156","messageId":"157","endLine":217,"endColumn":133},{"ruleId":"154","severity":1,"message":"155","line":229,"column":86,"nodeType":"156","messageId":"157","endLine":229,"endColumn":88},{"ruleId":"154","severity":1,"message":"155","line":229,"column":131,"nodeType":"156","messageId":"157","endLine":229,"endColumn":133},{"ruleId":"154","severity":1,"message":"155","line":239,"column":86,"nodeType":"156","messageId":"157","endLine":239,"endColumn":88},{"ruleId":"154","severity":1,"message":"155","line":239,"column":131,"nodeType":"156","messageId":"157","endLine":239,"endColumn":133},{"ruleId":"162","severity":1,"message":"163","line":286,"column":68,"nodeType":"164","endLine":292,"endColumn":47},{"ruleId":"154","severity":1,"message":"167","line":373,"column":45,"nodeType":"156","messageId":"157","endLine":373,"endColumn":47},{"ruleId":"154","severity":1,"message":"155","line":401,"column":19,"nodeType":"156","messageId":"157","endLine":401,"endColumn":21},{"ruleId":"154","severity":1,"message":"155","line":403,"column":57,"nodeType":"156","messageId":"157","endLine":403,"endColumn":59},{"ruleId":"168","severity":1,"message":"169","line":405,"column":17,"nodeType":"160","messageId":"170","endLine":405,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":406,"column":57,"nodeType":"156","messageId":"157","endLine":406,"endColumn":59},{"ruleId":"158","severity":1,"message":"159","line":2,"column":17,"nodeType":"160","messageId":"161","endLine":2,"endColumn":26},{"ruleId":"154","severity":1,"message":"167","line":122,"column":56,"nodeType":"156","messageId":"157","endLine":122,"endColumn":58},{"ruleId":"154","severity":1,"message":"155","line":144,"column":39,"nodeType":"156","messageId":"157","endLine":144,"endColumn":41},{"ruleId":"158","severity":1,"message":"159","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":26},{"ruleId":"158","severity":1,"message":"171","line":1,"column":28,"nodeType":"160","messageId":"161","endLine":1,"endColumn":37},{"ruleId":"154","severity":1,"message":"155","line":60,"column":36,"nodeType":"156","messageId":"157","endLine":60,"endColumn":38},{"ruleId":"158","severity":1,"message":"172","line":68,"column":73,"nodeType":"160","messageId":"161","endLine":68,"endColumn":82},{"ruleId":"158","severity":1,"message":"173","line":68,"column":84,"nodeType":"160","messageId":"161","endLine":68,"endColumn":86},{"ruleId":"158","severity":1,"message":"174","line":68,"column":88,"nodeType":"160","messageId":"161","endLine":68,"endColumn":101},{"ruleId":"154","severity":1,"message":"155","line":83,"column":46,"nodeType":"156","messageId":"157","endLine":83,"endColumn":48},{"ruleId":"154","severity":1,"message":"155","line":93,"column":54,"nodeType":"156","messageId":"157","endLine":93,"endColumn":56},{"ruleId":"154","severity":1,"message":"167","line":145,"column":57,"nodeType":"156","messageId":"157","endLine":145,"endColumn":59},{"ruleId":"154","severity":1,"message":"155","line":194,"column":70,"nodeType":"156","messageId":"157","endLine":194,"endColumn":72},{"ruleId":"154","severity":1,"message":"155","line":194,"column":125,"nodeType":"156","messageId":"157","endLine":194,"endColumn":127},{"ruleId":"175","severity":1,"message":"176","line":11,"column":1,"nodeType":"177","endLine":45,"endColumn":2},{"ruleId":"162","severity":1,"message":"163","line":24,"column":54,"nodeType":"164","endLine":24,"endColumn":86},{"ruleId":"162","severity":1,"message":"163","line":24,"column":89,"nodeType":"164","endLine":24,"endColumn":127},{"ruleId":"158","severity":1,"message":"178","line":2,"column":16,"nodeType":"160","messageId":"161","endLine":2,"endColumn":24},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Spinner' is defined but never used.","'ReactNode' is defined but never used.","Expected '!==' and instead saw '!='.","@typescript-eslint/no-redeclare","'questions' is already defined.","redeclared","'useEffect' is defined but never used.","'timeLimit' is assigned a value but never used.","'xp' is assigned a value but never used.","'correctAnswer' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","'Redirect' is defined but never used.","no-global-assign","no-unsafe-negation"]