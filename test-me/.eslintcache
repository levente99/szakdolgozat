[{"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\index.tsx":"1","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\reportWebVitals.ts":"2","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\App.tsx":"3","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Home\\Home.tsx":"4","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\common\\Navigation.tsx":"5","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\MyTests.tsx":"6","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\Gameboy\\Gameboy.tsx":"7","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Authentication\\Authentication.tsx":"8","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CreateTest\\CreateTest.tsx":"9"},{"size":543,"mtime":1611689558912,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":847,"mtime":1614423329056,"results":"13","hashOfConfig":"11"},{"size":716,"mtime":1615630689193,"results":"14","hashOfConfig":"11"},{"size":1014,"mtime":1614423243830,"results":"15","hashOfConfig":"11"},{"size":2954,"mtime":1615630688660,"results":"16","hashOfConfig":"11"},{"size":2055,"mtime":1615630173376,"results":"17","hashOfConfig":"11"},{"size":14454,"mtime":1615630689154,"results":"18","hashOfConfig":"11"},{"size":22926,"mtime":1615630689874,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ho9eh0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"22"},"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\index.tsx",[],["44","45"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\reportWebVitals.ts",[],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\App.tsx",["46"],"import React from 'react';\nimport logo from './logo.svg';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Navigation from './components/common/Navigation';\nimport MyTests from \"./components/MyTests/MyTests\";\nimport Authentication from \"./components/Authentication/Authentication\";\nimport CreateTest from './components/CreateTest/CreateTest';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navigation />\n        <Switch>\n          <Route path=\"/auth\" component={Authentication} />\n          <Route path=\"/tests\" component={MyTests} />\n          <Route path=\"/create\" component={CreateTest} />\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Home\\Home.tsx",["47"],"import React, { Component } from 'react';\r\n\r\ninterface HomeProps {\r\n    testName: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    createdTime: string;\r\n    deadline: string;\r\n    testTime: number;\r\n    questionNumber: number;\r\n    xp: number;\r\n}\r\n\r\nexport default class Home extends React.Component<HomeProps> {\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch(`https://localhost:44369/api/users/fetch-from-session`, { method: 'GET', credentials: \"include\", mode: 'cors' })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <h1>Home</h1>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\common\\Navigation.tsx",["48","49","50"],"import React, { Component } from 'react';\r\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\r\n\r\nexport default class Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar bg=\"primary\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"/\">\r\n                        <img\r\n                            alt=\"\"\r\n                            src=\"/gameboy-logo.png\"\r\n                            width=\"25\"\r\n                            className=\"d-inline-block align-top\"\r\n                        />{' '}\r\n                        Test ME\r\n                    </Navbar.Brand>\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link href=\"/tests\">Tesztjeim</Nav.Link>\r\n                        <Nav.Link href=\"/create\">Teszt készítése</Nav.Link>\r\n                        <Nav.Link href=\"/auth\">Bejelentkezés</Nav.Link>\r\n                    </Nav>\r\n                </Navbar>\r\n            </>\r\n        );\r\n    }\r\n};","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\MyTests.tsx",["51","52","53"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\Gameboy\\Gameboy.tsx",["54"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Authentication\\Authentication.tsx",["55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71"],"import React, { Component } from 'react';\r\nimport { Alert, Spinner } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './Authentication.css';\r\n\r\ninterface LoginProps {\r\n}\r\n\r\ninterface LoginState {\r\n    loginValue: {\r\n        userName: string;\r\n        password: string;\r\n        loginError: string;\r\n        loggedIn: boolean;\r\n    },\r\n    registerValue: {\r\n        userRole: string;\r\n        userName: string;\r\n        firstName: string;\r\n        lastName: string;\r\n        email: string;\r\n        password: string;\r\n        registerMessage: string;\r\n    }\r\n    loginSignupSwap: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nexport default class Login extends Component<LoginProps, LoginState> {\r\n\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loginValue: {\r\n                userName: '',\r\n                password: '',\r\n                loggedIn: false,\r\n                loginError: ''\r\n            },\r\n            registerValue: {\r\n                userRole: 'Diák',\r\n                userName: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                password: '',\r\n                registerMessage: ''\r\n            },\r\n            loginSignupSwap: false,\r\n            loading: false\r\n        }\r\n\r\n        this.saveInputChange = this.saveInputChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"none\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"flex\";\r\n    }\r\n\r\n    saveInputChange(e: { currentTarget: { value: any; }; preventDefault: () => void; target: { name: any; value: any; }; }) {\r\n        const { name, value } = e.target;\r\n\r\n        e.preventDefault();\r\n        if ((e.target as HTMLInputElement).id == 'teacher' || (e.target as HTMLInputElement).id == 'student' || (e.target as HTMLInputElement).id == 'firstName' || (e.target as HTMLInputElement).id == 'lastName' || (e.target as HTMLInputElement).id == 'SignUpInputEmail' || (e.target as HTMLInputElement).id == 'SignUpInputUsername' || (e.target as HTMLInputElement).id == 'SignUpInputPassword' || (e.target as HTMLInputElement).id == 'userRole') {\r\n            this.setState((prevState) => ({ registerValue: { ...prevState.registerValue, [name]: value } }));\r\n        }\r\n        else if ((e.target as HTMLInputElement).id == 'SignInInputUsername' || (e.target as HTMLInputElement).id == 'SignInInputPassword') {\r\n            this.setState((prevState) => ({ loginValue: { ...prevState.loginValue, [name]: value } }));\r\n        }\r\n    }\r\n\r\n    getUserId = async () => {\r\n        let userId = await fetch(`https://localhost:44369/api/users/get-user-id?username=${this.state.loginValue.userName}&password=${this.state.loginValue.password}`).then(function (body) {\r\n            return body.text();\r\n        }).then(function (response) {\r\n            return response;\r\n        });\r\n        return userId;\r\n    }\r\n\r\n    submitLogin = async () => {\r\n        this.setState({ ...this.state, loading: true });\r\n        await fetch(`https://localhost:44369/api/login`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                userName: this.state.loginValue.userName,\r\n                password: this.state.loginValue.password\r\n            })\r\n        }).then(async data => {\r\n            switch (data.status) {\r\n                case 403:\r\n                    this.setState(prevState => ({\r\n                        loginValue: {\r\n                            ...prevState.loginValue,\r\n                            loginError: \"Kérlek igazold vissza az email címed.\"\r\n                        }\r\n                    }));\r\n                    break;\r\n                case 500:\r\n                    this.setState(prevState => ({\r\n                        loginValue: {\r\n                            ...prevState.loginValue,\r\n                            loginError: \"Rossz felhasználónév vagy jelszó!\"\r\n                        }\r\n                    }));\r\n                    break;\r\n                case 200:\r\n                    await this.getUserId().then(async function (userId) {\r\n                        fetch(`https://localhost:44369/api/users/save-to-session?id=${userId}`, { method: 'GET', credentials: \"include\" });\r\n                    })\r\n\r\n                    this.setState(prevState => ({\r\n                        loginValue: {\r\n                            ...prevState.loginValue,\r\n                            loggedIn: true\r\n                        }\r\n                    }));\r\n                    break;\r\n            }\r\n        })\r\n\r\n        await this.setState(prevState => ({\r\n            loading: false\r\n        }));\r\n    }\r\n\r\n\r\n\r\n    submitSignin = async () => {\r\n        this.setState({ ...this.state, loading: true });\r\n        await fetch('https://localhost:44369/api/register', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: JSON.stringify({\r\n                RoleId: this.state.registerValue.userRole == \"Diák\" ? 1 : 0,\r\n                FirstName: this.state.registerValue.firstName,\r\n                LastName: this.state.registerValue.lastName,\r\n                UserName: this.state.registerValue.userName,\r\n                Email: this.state.registerValue.email,\r\n                Password: this.state.registerValue.password\r\n            })\r\n        }).then(function (body) {\r\n            return body.json();\r\n        }).then((response) => {\r\n            if (!response.succeeded) {\r\n                this.setState(prevState => ({\r\n                    registerValue: {\r\n                        ...prevState.registerValue,\r\n                        registerMessage: response.errors.Password == undefined ? response.errors[0].description : response.errors.Password[0]\r\n                    }\r\n                }));\r\n            } else {\r\n                this.setState(prevState => ({\r\n                    registerValue: {\r\n                        ...prevState.registerValue,\r\n                        registerMessage: \"Sikers regisztráció, igazold vissza az e-mail címed és jelentkezz be!\"\r\n                    }\r\n                }));\r\n                this.changeContainer();\r\n            }\r\n        });\r\n        await this.setState(prevState => ({\r\n            loading: false\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loginValue.loggedIn) {\r\n            return <Redirect to='/' />;\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"login-background\">\r\n                    <div className={this.state.loginSignupSwap ? \"right-panel-active container\" : \"container\"} id=\"container\">\r\n                        <div className=\"form-container sign-up-container\">\r\n                            <form className=\"login-form\">\r\n                                <h2 className=\"login-title mb-2\">Regisztrálj! 📝</h2>\r\n\r\n                                <div className=\"btn-group btn-group-toggle text-left m-2\" style={{ fontSize: '30px' }}>\r\n                                    <label className={this.state.registerValue.userRole == 'Tanár' ? 'btn btn-primary active' : 'btn btn-primary'}>\r\n                                        <div style={{ fontSize: '30px' }}>👩‍🏫</div>\r\n                                        <input type=\"radio\" name=\"userRole\" id=\"teacher\" value=\"Tanár\" onChange={this.saveInputChange} />Tanár\r\n                                </label>\r\n                                    <label className={this.state.registerValue.userRole == 'Diák' ? 'btn btn-primary active' : 'btn btn-primary'}>\r\n                                        <div style={{ fontSize: '30px' }}>👨‍🎓</div>\r\n                                        <input type=\"radio\" name=\"userRole\" id=\"student\" value=\"Diák\" onChange={this.saveInputChange} />Diák\r\n                                </label>\r\n                                </div>\r\n                                <label htmlFor=\"firstName\">Vezetéknév és Keresztnév</label>\r\n                                <div className=\"input-group\">\r\n                                    <input className=\"form-control input-sm\" id=\"firstName\" placeholder=\"Vezetéknév\" name=\"firstName\" onChange={this.saveInputChange} />\r\n                                    <span className=\"input-group-btn\" style={{ width: '0px' }}></span>\r\n                                    <input className=\"form-control input-sm\" id=\"lastName\" placeholder=\"Keresztnév\" name=\"lastName\" onChange={this.saveInputChange} />\r\n                                </div>\r\n                                <div className=\"form-group text-left mt-3\">\r\n                                    <label htmlFor=\"SignUpInputUsername\">Felhasználónév</label>\r\n                                    <input className=\"form-control\" id=\"SignUpInputUsername\" name=\"userName\" onChange={this.saveInputChange} placeholder=\"Felhasználónév\" />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <label htmlFor=\"SignUpInputEmail\">E-mail</label>\r\n                                    <input type=\"email\" className=\"form-control\" id=\"SignUpInputEmail\" aria-describedby=\"emailHelp\" name=\"email\" onChange={this.saveInputChange} placeholder=\"E-mail\" />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <label htmlFor=\"SignUpInputPassword\">Jelszó</label>\r\n                                    <input type=\"password\" className=\"form-control\" id=\"SignUpInputPassword\" name=\"password\" onChange={this.saveInputChange} placeholder=\"Jelszó\" />\r\n                                </div>\r\n                                {this.state.loading ? <Spinner animation=\"border\" role=\"status\">\r\n                                    <span className=\"sr-only\">Loading...</span>\r\n                                </Spinner> :\r\n                                    <button type=\"button\" onClick={this.submitSignin} className=\"btn btn-success\">Regisztráció</button>\r\n                                }\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"form-container sign-in-container\">\r\n                            <form className=\"login-form\">\r\n                                <h2 className=\"login-title mb-5\">Jelentkezz be! 🔓</h2>\r\n\r\n                                <div className=\"form-group text-left\">\r\n                                    <label htmlFor=\"SignInInputUsername\">Felhasználónév</label>\r\n                                    <input className=\"form-control\" id=\"SignInInputUsername\" name=\"userName\" onChange={this.saveInputChange} placeholder=\"Felhasználónév\" />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <label htmlFor=\"SignInInputPassword\">Jelszó</label>\r\n                                    <input type=\"password\" className=\"form-control\" id=\"SignInInputPassword\" name=\"password\" onChange={this.saveInputChange} placeholder=\"Jelszó\" />\r\n                                </div>\r\n                                {this.state.loading ? <Spinner animation=\"border\" role=\"status\">\r\n                                    <span className=\"sr-only\">Loading...</span>\r\n                                </Spinner> :\r\n                                    <button type=\"button\" onClick={this.submitLogin} className=\"btn btn-success\">Bejelentkezés</button>\r\n                                }\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"overlay-container\">\r\n                            <div className=\"overlay\">\r\n                                <div className=\"overlay-panel overlay-left\">\r\n                                    {this.state.registerValue.registerMessage != \"\" ? <Alert color=\"danger\" style={{ backgroundColor: '#75000a' }}>\r\n                                        {this.state.registerValue.registerMessage}\r\n                                    </Alert> : null}\r\n                                    <h1 className=\"login-title\">Üdv újra itt!</h1>\r\n                                    <p>Ahhoz hogy hozzáférj a tesztjeidhez kérlek jelentkezz be!</p>\r\n                                    <button className=\"login-button.ghost login-button\" onClick={() => this.changeContainer()} id=\"signIn\">Bejelentkezés</button>\r\n                                </div>\r\n                                <div className=\"overlay-panel overlay-right\">\r\n                                    {this.state.loginValue.loginError != \"\" ? <Alert color=\"danger\" style={{ backgroundColor: '#75000a' }}>\r\n                                        {this.state.loginValue.loginError}\r\n                                    </Alert> : null}\r\n                                    {this.state.registerValue.registerMessage == \"Sikers regisztráció, igazold vissza az e-mail címed és jelentkezz be!\" ? <Alert color=\"danger\" style={{ backgroundColor: '#218838' }}>\r\n                                        {this.state.registerValue.registerMessage}\r\n                                    </Alert> : null}\r\n                                    <h1 className=\"login-title\">Üdv itt!</h1>\r\n                                    <p>Add meg az adataidat és már kezdheted is a teszt készítést!</p>\r\n                                    <button className=\"login-button.ghost login-button\" onClick={() => this.changeContainer()} id=\"signUp\">Regisztráció</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    changeContainer() {\r\n        this.setState({ loginSignupSwap: !this.state.loginSignupSwap })\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CreateTest\\CreateTest.tsx",["72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],"\r\nimport React, { Component } from 'react'\r\nimport { Button, Form, OverlayTrigger, Popover, Image, Modal, ListGroup, Container, Row, Col, Spinner } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './CreateTest.css';\r\n\r\ninterface CreateTestProps {\r\n}\r\n\r\ninterface CreateTestState {\r\n    description: string;\r\n    userId: string;\r\n    title: string;\r\n    created: string;\r\n    deadline: string;\r\n    questions: [\r\n        {\r\n            id: number\r\n            problem: string;\r\n            answerOne: string;\r\n            answerTwo: string;\r\n            answerThree?: string;\r\n            answerFour?: string;\r\n            timeLimit: number;\r\n            xp: number;\r\n            correctAnswer: number;\r\n        }\r\n    ],\r\n    editedQuestion: number;\r\n    saveModalIsOpen: boolean;\r\n    userToFill: string;\r\n    fillingUsers: string[];\r\n    savingTest: boolean;\r\n    createdTest: boolean;\r\n}\r\n\r\nexport default class CreateTest extends Component<CreateTestProps, CreateTestState> {\r\n\r\n    constructor(props: CreateTestProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            description: '',\r\n            userId: '',\r\n            title: '',\r\n            created: '',\r\n            deadline: '',\r\n            questions: [\r\n                {\r\n                    id: 0,\r\n                    problem: '',\r\n                    answerOne: '',\r\n                    answerTwo: '',\r\n                    answerThree: '',\r\n                    answerFour: '',\r\n                    timeLimit: 0,\r\n                    xp: 0,\r\n                    correctAnswer: 0\r\n                },\r\n            ],\r\n            editedQuestion: 0,\r\n            saveModalIsOpen: false,\r\n            userToFill: '',\r\n            fillingUsers: [],\r\n            savingTest: false,\r\n            createdTest: false\r\n        }\r\n\r\n        this.createTrueFalseQuestion = this.createTrueFalseQuestion.bind(this);\r\n        this.handleQuestionInputs = this.handleQuestionInputs.bind(this);\r\n        this.chooseQuestionToEdit = this.chooseQuestionToEdit.bind(this);\r\n        this.createQuizQuestion = this.createQuizQuestion.bind(this);\r\n        this.addUsersToTheTest = this.addUsersToTheTest.bind(this);\r\n        this.handleSaveInputs = this.handleSaveInputs.bind(this);\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n        this.deleteUser = this.deleteUser.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`https://localhost:44369/api/users/fetch-from-session`, { method: 'GET', credentials: \"include\", mode: 'cors' }).then(function (body) {\r\n            return body.text();\r\n        }).then((response) => {\r\n            this.setState({ userId: response });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.createdTest) {\r\n            return <Redirect to='/' />;\r\n        }\r\n        const selectQuestionType = (\r\n            <Popover id=\"popover\" >\r\n                <Popover.Title as=\"h3\">Milyen típusú kérdés legyen?</Popover.Title>\r\n                <Popover.Content>\r\n                    <Form.Group>\r\n                        <Button className=\"new-question-button w-75\" onClick={this.createQuizQuestion} variant=\"outline-primary\">\r\n                            <Image src=\"/img/quiz_icon.png\" />\r\n                            <p className=\"font-weight-bold\">Kvíz</p>\r\n                            <p>Adj a játékosoknak több válaszlehetőséget, amelyek közül választhatnak</p>\r\n                        </Button>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button className=\"new-question-button w-75\" onClick={this.createTrueFalseQuestion} variant=\"outline-primary\">\r\n                            <Image src=\"/img/true_false_icon.png\" />\r\n                            <p className=\"font-weight-bold\">Igaz-hamis</p>\r\n                            <p>Engedd hogy a játékos döntse el, hogy az állítás igaz vagy hamis</p>\r\n                        </Button>\r\n                    </Form.Group>\r\n\r\n                </Popover.Content>\r\n            </Popover>\r\n        );\r\n\r\n        const questionList = (\r\n            this.state.questions[0].problem.length > 0 || this.state.questions.length > 1 ?\r\n                this.state.questions.map((item, index) => (\r\n                    <div data-key={item.id} onClick={() => this.chooseQuestionToEdit(item.id)} style={{\r\n                        backgroundColor: this.state.editedQuestion == item.id ? '#2b92ff' : 'white',\r\n                    }} className=\"question-list-item\" >\r\n                        <img src=\"/img/trash.png\" width=\"25\" style={{ cursor: 'pointer' }} onClick={() => this.deleteQuestion(index)} />\r\n                        <div data-key={item.id} className=\"question-item-content\" style={{\r\n                            backgroundColor: this.state.editedQuestion == item.id ? 'white' : '#e0efff',\r\n                        }}>\r\n                            <p data-key={item.id} className=\"sidebar-question-number\">{index + 1}</p>\r\n                            <p data-key={item.id} className=\"question-type\">{item.hasOwnProperty(\"answerThree\") ? \"Kvíz\" : \"Igaz-hamis\"}</p>\r\n                            <p data-key={item.id} className=\"font-weight-bold item-question-text\">{item.problem}</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                ))\r\n                : <div data-key=\"0\" onClick={this.chooseQuestionToEdit} style={{ backgroundColor: '#2b92ff' }} className=\"question-list-item\">\r\n                    <img src=\"/img/trash.png\" width=\"25\" style={{ cursor: 'pointer' }} onClick={() => this.deleteQuestion(0)} />\r\n                    <div data-key=\"0\" className=\"question-item-content\" style={{ backgroundColor: 'white' }}>\r\n                        <p data-key=\"0\" className=\"sidebar-question-number\">1</p>\r\n                        <p data-key=\"0\" className=\"question-type\">Kvíz</p>\r\n                        <p data-key=\"0\" className=\"font-weight-bold mt-2\">{this.state.questions[0].problem}</p>\r\n\r\n                    </div>\r\n                </div>\r\n        )\r\n\r\n        return (\r\n            this.state.userId == \"\" ? <div className=\"alert alert-danger\" role=\"alert\">Jelentkezz be hogy tesztet készíthess!</div> :\r\n                <div className=\"edit-container\">\r\n                    <div className=\"sidebar-container\">\r\n                        <div className=\"sidebar\">\r\n                            {questionList}\r\n                            <Form.Group>\r\n                                <OverlayTrigger\r\n                                    rootClose={true} trigger=\"click\" placement=\"right\" overlay={selectQuestionType}>\r\n                                    <Button className=\"new-question-button w-75\" variant=\"primary\">Új kérdés</Button>\r\n                                </OverlayTrigger>\r\n                            </Form.Group>\r\n                        </div>\r\n\r\n                        <Form.Group className=\"save-exit-button w-100\">\r\n                            <Button className=\"cancel-test-button\" variant=\"danger\" onClick={() => this.setState({ createdTest: true })}>Kilépés</Button>\r\n                            <Button variant=\"success\" onClick={this.openModal}> Mentés</Button>{' '}\r\n                        </Form.Group>\r\n                    </div>\r\n\r\n                    <div className=\"create\">\r\n                        <Form.Group className=\"question-text\">\r\n                            <Form.Control type=\"text\" onChange={(e) => { this.handleQuestionInputs(e) }} name=\"problem\" id=\"question-text-input\" placeholder=\"Írd ide a kérdésed...\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.problem}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <div className=\"question-details\">\r\n                            <Form.Group className=\"time-limit\" controlId=\"formBasicRange\">\r\n                                <Form.Label className=\"time-label\">Idő: </Form.Label>\r\n                                <Form.Label className=\"time-number-label\">{this.state.questions.find(q => q.id == this.state.editedQuestion)?.timeLimit}</Form.Label>\r\n                                <Form.Control min=\"5\" max=\"200\" size=\"lg\" step={5} name=\"timeLimit\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.timeLimit} onChange={(e) => this.handleQuestionInputs(e)} type=\"range\" />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"question-xp\" controlId=\"formBasicRange\">\r\n                                <Form.Label className=\"xp-label\">Xp: </Form.Label>\r\n                                <Form.Label className=\"xp-slider-number-label\">{this.state.questions.find(q => q.id == this.state.editedQuestion)?.xp}</Form.Label>\r\n                                <Form.Control min=\"0\" max=\"1000\" size=\"sm\" step={100} name=\"xp\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.xp} onChange={(e) => this.handleQuestionInputs(e)} type=\"range\" />\r\n                            </Form.Group>\r\n                        </div>\r\n\r\n                        {this.state.questions.find(q => q.id == this.state.editedQuestion)?.hasOwnProperty(\"answerThree\") ?\r\n                            <Form.Group className=\"answers\">\r\n                                <Form.Group className=\"answers-one\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerOne} name=\"answerOne\" placeholder=\"Első válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 0 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"0\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-two\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerTwo} name=\"answerTwo\" placeholder=\"Második válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 1 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"1\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-three\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} name=\"answerThree\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerThree} placeholder=\"Harmadik válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 2 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"2\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-four\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} name=\"answerFour\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerFour} placeholder=\"Negyedik válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 3 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"3\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form.Group> :\r\n                            <Form.Group className=\"answers\">\r\n                                <Form.Group className=\"answers-one\">\r\n                                    <Form.Label className=\"answers-true-label\">Igaz</Form.Label>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 0 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"0\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-two\">\r\n                                    <Form.Label className=\"answers-false-label\">Hamis</Form.Label>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 1 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"1\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form.Group>\r\n                        }\r\n                    </div>\r\n\r\n                    <Modal\r\n                        show={this.state.saveModalIsOpen}\r\n                        size=\"lg\"\r\n                        aria-labelledby=\"contained-modal-title-vcenter\"\r\n                        centered\r\n                        onHide={this.closeModal}\r\n                    >\r\n                        <Modal.Header closeButton >\r\n                            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                Teszt mentése\r\n                        </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Teszt címe:</Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" placeholder=\"Cím\" onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"user-email-input\">\r\n                                        <Form.Label>Kitöltők hozzáadása:</Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"userToFill\" value={this.state.userToFill} placeholder=\"E-mail cím\" onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                        <Button variant=\"success\" className=\"add-user-button\" onClick={this.addUsersToTheTest}> Hozzáadás</Button>{' '}\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"test-date-input\">\r\n                                        <Form.Label>Kitöltési határidő:</Form.Label>\r\n                                        <Form.Control type=\"date\" name='deadline' onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Leírás</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} name='description' onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col className=\"added-users\">\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item variant=\"primary\">Hozzáadott felhasználók:</ListGroup.Item>\r\n                                        {this.state.fillingUsers.map((item, index) => (\r\n                                            <ListGroup.Item>{item} <img\r\n                                                src=\"/img/trash.png\"\r\n                                                width=\"25\"\r\n                                                // data-key={index}\r\n                                                style={{ float: 'right', cursor: 'pointer' }}\r\n                                                onClick={() => this.deleteUser(index)}\r\n                                            /></ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            {this.state.savingTest ? <Spinner animation=\"border\" role=\"status\">\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                            </Spinner> :\r\n                                <>\r\n                                    <Button onClick={this.closeModal}>Bezárás</Button>\r\n                                    <Button variant=\"success\" onClick={() => this.saveTest()}>Mentés</Button>\r\n                                </>\r\n                            }\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </div >\r\n        )\r\n    }\r\n\r\n    openModal = () => this.setState({ saveModalIsOpen: true });\r\n    closeModal = () => this.setState({ saveModalIsOpen: false });\r\n\r\n    createQuizQuestion() {\r\n        this.state.questions.push({\r\n            id: Math.max.apply(Math, this.state.questions.map(function (o) { return o.id; })) + 1,\r\n            problem: '',\r\n            answerOne: '',\r\n            answerTwo: '',\r\n            answerThree: '',\r\n            answerFour: '',\r\n            timeLimit: 0,\r\n            xp: 0,\r\n            correctAnswer: 0\r\n        })\r\n\r\n        document.body.click()\r\n        this.forceUpdate();\r\n    }\r\n\r\n    createTrueFalseQuestion() {\r\n        this.state.questions.push({\r\n            id: Math.max.apply(Math, this.state.questions.map(function (o) { return o.id; })) + 1,\r\n            problem: '',\r\n            answerOne: '',\r\n            answerTwo: '',\r\n            timeLimit: 0,\r\n            xp: 0,\r\n            correctAnswer: 0\r\n        })\r\n\r\n        document.body.click()\r\n        this.forceUpdate();\r\n    }\r\n\r\n    chooseQuestionToEdit(id: any) {\r\n        try {\r\n            this.setState({ editedQuestion: id });\r\n        } catch (error) {\r\n            this.setState({ editedQuestion: this.state.questions[0].id });\r\n        }\r\n        this.forceUpdate();\r\n\r\n    }\r\n\r\n    deleteQuestion(arg: any) {\r\n        var questions: any = [...this.state.questions]; // make a separate copy of the array\r\n        questions.splice(arg, 1);\r\n        this.setState({ questions: questions });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    deleteUser(arg: any) {\r\n        var array = [...this.state.fillingUsers]; // make a separate copy of the array\r\n        array.splice(arg, 1);\r\n        this.setState({ fillingUsers: array });\r\n\r\n    }\r\n\r\n    slidebarQuestions() {\r\n        if (this.state.questions[0].problem != \"\") {\r\n            return (\r\n                this.state.questions.map(q =>\r\n                    <div className=\"question-list-item\">\r\n                        {q.problem}\r\n                    </div>\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    addUsersToTheTest() {\r\n        this.setState(previousState => ({\r\n            fillingUsers: [...previousState.fillingUsers, this.state.userToFill],\r\n            userToFill: \"\"\r\n        }));\r\n    }\r\n\r\n    handleSaveInputs(e: { target: { name: any; value: any; }; }) {\r\n        const { name, value } = e.target;\r\n\r\n        const newState = { [name]: value } as Pick<CreateTestState, keyof CreateTestState>;\r\n        this.setState(newState);\r\n    }\r\n\r\n    handleQuestionInputs(e: { currentTarget: { value: any; }; preventDefault: () => void; target: { name: string | number; value: string | number; id: string | number } }) {\r\n        const { name, value, id } = e.target;\r\n\r\n        if (value == \"on\") {\r\n            var questions: any = [...this.state.questions];\r\n            questions.find((q: { id: number; }) => q.id == this.state.editedQuestion).correctAnswer = id;\r\n        } else {\r\n            var questions: any = [...this.state.questions];\r\n            questions.find((q: { id: number; }) => q.id == this.state.editedQuestion)[name] = value;\r\n        }\r\n        this.setState({ questions });\r\n    }\r\n\r\n    async saveTest() {\r\n        this.setState({ ...this.state, savingTest: true });\r\n        let questions = this.state.questions.map(({ id, ...keepAttrs }) => keepAttrs)\r\n\r\n        await fetch('https://localhost:44369/api/tests', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                UserId: this.state.userId,\r\n                Title: this.state.title,\r\n                Description: this.state.description,\r\n                Questions: questions,\r\n                Deadline: this.state.deadline\r\n            })\r\n        }).then(response => {\r\n            if (response.ok) return response.json();\r\n        }).then(async json => {\r\n            await this.state.fillingUsers.forEach(async (email) => {\r\n                await fetch('https://localhost:44369/api/users-tests', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        User: {\r\n                            Email: email\r\n                        },\r\n                        TestId: json.id\r\n                    })\r\n\r\n                });\r\n            });\r\n            this.setState({ ...this.state, savingTest: false, createdTest: true });\r\n        })\r\n    }\r\n}\r\n",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":12},{"ruleId":"110","severity":1,"message":"114","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"115","line":2,"column":23,"nodeType":"112","messageId":"113","endLine":2,"endColumn":27},{"ruleId":"110","severity":1,"message":"116","line":2,"column":29,"nodeType":"112","messageId":"113","endLine":2,"endColumn":40},{"ruleId":"110","severity":1,"message":"117","line":2,"column":42,"nodeType":"112","messageId":"113","endLine":2,"endColumn":48},{"ruleId":"110","severity":1,"message":"118","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":18},{"ruleId":"119","severity":1,"message":"120","line":51,"column":31,"nodeType":"121","messageId":"122","endLine":51,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":52,"column":50,"nodeType":"121","messageId":"122","endLine":52,"endColumn":52},{"ruleId":"110","severity":1,"message":"123","line":1,"column":10,"nodeType":"112","messageId":"113","endLine":1,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":69,"column":47,"nodeType":"121","messageId":"122","endLine":69,"endColumn":49},{"ruleId":"119","severity":1,"message":"120","line":69,"column":97,"nodeType":"121","messageId":"122","endLine":69,"endColumn":99},{"ruleId":"119","severity":1,"message":"120","line":69,"column":147,"nodeType":"121","messageId":"122","endLine":69,"endColumn":149},{"ruleId":"119","severity":1,"message":"120","line":69,"column":199,"nodeType":"121","messageId":"122","endLine":69,"endColumn":201},{"ruleId":"119","severity":1,"message":"120","line":69,"column":250,"nodeType":"121","messageId":"122","endLine":69,"endColumn":252},{"ruleId":"119","severity":1,"message":"120","line":69,"column":309,"nodeType":"121","messageId":"122","endLine":69,"endColumn":311},{"ruleId":"119","severity":1,"message":"120","line":69,"column":371,"nodeType":"121","messageId":"122","endLine":69,"endColumn":373},{"ruleId":"119","severity":1,"message":"120","line":69,"column":433,"nodeType":"121","messageId":"122","endLine":69,"endColumn":435},{"ruleId":"119","severity":1,"message":"120","line":72,"column":52,"nodeType":"121","messageId":"122","endLine":72,"endColumn":54},{"ruleId":"119","severity":1,"message":"120","line":72,"column":114,"nodeType":"121","messageId":"122","endLine":72,"endColumn":116},{"ruleId":"119","severity":1,"message":"120","line":151,"column":59,"nodeType":"121","messageId":"122","endLine":151,"endColumn":61},{"ruleId":"119","severity":1,"message":"120","line":165,"column":67,"nodeType":"121","messageId":"122","endLine":165,"endColumn":69},{"ruleId":"119","severity":1,"message":"120","line":196,"column":89,"nodeType":"121","messageId":"122","endLine":196,"endColumn":91},{"ruleId":"119","severity":1,"message":"120","line":200,"column":89,"nodeType":"121","messageId":"122","endLine":200,"endColumn":91},{"ruleId":"119","severity":1,"message":"124","line":252,"column":79,"nodeType":"121","messageId":"122","endLine":252,"endColumn":81},{"ruleId":"119","severity":1,"message":"124","line":260,"column":71,"nodeType":"121","messageId":"122","endLine":260,"endColumn":73},{"ruleId":"119","severity":1,"message":"120","line":263,"column":79,"nodeType":"121","messageId":"122","endLine":263,"endColumn":81},{"ruleId":"110","severity":1,"message":"125","line":3,"column":74,"nodeType":"112","messageId":"113","endLine":3,"endColumn":83},{"ruleId":"119","severity":1,"message":"120","line":118,"column":68,"nodeType":"121","messageId":"122","endLine":118,"endColumn":70},{"ruleId":"126","severity":1,"message":"127","line":120,"column":25,"nodeType":"128","endLine":120,"endColumn":137},{"ruleId":"119","severity":1,"message":"120","line":122,"column":72,"nodeType":"121","messageId":"122","endLine":122,"endColumn":74},{"ruleId":"126","severity":1,"message":"127","line":132,"column":21,"nodeType":"128","endLine":132,"endColumn":129},{"ruleId":"119","severity":1,"message":"120","line":143,"column":31,"nodeType":"121","messageId":"122","endLine":143,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":164,"column":225,"nodeType":"121","messageId":"122","endLine":164,"endColumn":227},{"ruleId":"119","severity":1,"message":"120","line":171,"column":112,"nodeType":"121","messageId":"122","endLine":171,"endColumn":114},{"ruleId":"119","severity":1,"message":"120","line":172,"column":144,"nodeType":"121","messageId":"122","endLine":172,"endColumn":146},{"ruleId":"119","severity":1,"message":"120","line":176,"column":117,"nodeType":"121","messageId":"122","endLine":176,"endColumn":119},{"ruleId":"119","severity":1,"message":"120","line":177,"column":140,"nodeType":"121","messageId":"122","endLine":177,"endColumn":142},{"ruleId":"119","severity":1,"message":"120","line":181,"column":62,"nodeType":"121","messageId":"122","endLine":181,"endColumn":64},{"ruleId":"119","severity":1,"message":"120","line":184,"column":145,"nodeType":"121","messageId":"122","endLine":184,"endColumn":147},{"ruleId":"119","severity":1,"message":"120","line":187,"column":86,"nodeType":"121","messageId":"122","endLine":187,"endColumn":88},{"ruleId":"119","severity":1,"message":"120","line":187,"column":131,"nodeType":"121","messageId":"122","endLine":187,"endColumn":133},{"ruleId":"119","severity":1,"message":"120","line":194,"column":145,"nodeType":"121","messageId":"122","endLine":194,"endColumn":147},{"ruleId":"119","severity":1,"message":"120","line":197,"column":86,"nodeType":"121","messageId":"122","endLine":197,"endColumn":88},{"ruleId":"119","severity":1,"message":"120","line":197,"column":131,"nodeType":"121","messageId":"122","endLine":197,"endColumn":133},{"ruleId":"119","severity":1,"message":"120","line":204,"column":164,"nodeType":"121","messageId":"122","endLine":204,"endColumn":166},{"ruleId":"119","severity":1,"message":"120","line":207,"column":86,"nodeType":"121","messageId":"122","endLine":207,"endColumn":88},{"ruleId":"119","severity":1,"message":"120","line":207,"column":131,"nodeType":"121","messageId":"122","endLine":207,"endColumn":133},{"ruleId":"119","severity":1,"message":"120","line":214,"column":163,"nodeType":"121","messageId":"122","endLine":214,"endColumn":165},{"ruleId":"119","severity":1,"message":"120","line":217,"column":86,"nodeType":"121","messageId":"122","endLine":217,"endColumn":88},{"ruleId":"119","severity":1,"message":"120","line":217,"column":131,"nodeType":"121","messageId":"122","endLine":217,"endColumn":133},{"ruleId":"119","severity":1,"message":"120","line":229,"column":86,"nodeType":"121","messageId":"122","endLine":229,"endColumn":88},{"ruleId":"119","severity":1,"message":"120","line":229,"column":131,"nodeType":"121","messageId":"122","endLine":229,"endColumn":133},{"ruleId":"119","severity":1,"message":"120","line":239,"column":86,"nodeType":"121","messageId":"122","endLine":239,"endColumn":88},{"ruleId":"119","severity":1,"message":"120","line":239,"column":131,"nodeType":"121","messageId":"122","endLine":239,"endColumn":133},{"ruleId":"126","severity":1,"message":"127","line":286,"column":68,"nodeType":"128","endLine":292,"endColumn":47},{"ruleId":"119","severity":1,"message":"124","line":373,"column":45,"nodeType":"121","messageId":"122","endLine":373,"endColumn":47},{"ruleId":"119","severity":1,"message":"120","line":401,"column":19,"nodeType":"121","messageId":"122","endLine":401,"endColumn":21},{"ruleId":"119","severity":1,"message":"120","line":403,"column":57,"nodeType":"121","messageId":"122","endLine":403,"endColumn":59},{"ruleId":"129","severity":1,"message":"130","line":405,"column":17,"nodeType":"112","messageId":"131","endLine":405,"endColumn":31},{"ruleId":"119","severity":1,"message":"120","line":406,"column":57,"nodeType":"121","messageId":"122","endLine":406,"endColumn":59},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'Redirect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ReactNode' is defined but never used.","Expected '!==' and instead saw '!='.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-redeclare","'questions' is already defined.","redeclared","no-global-assign","no-unsafe-negation"]