[{"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\index.tsx":"1","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\reportWebVitals.ts":"2","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\App.tsx":"3","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Home\\Home.tsx":"4","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\common\\Navigation.tsx":"5","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\MyTests.tsx":"6","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\Gameboy\\Gameboy.tsx":"7","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Authentication\\Authentication.tsx":"8","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CreateTest\\CreateTest.tsx":"9","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\CompleteTest.tsx":"10","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\Question\\Question.tsx":"11","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\QuestionType\\QuestionType.tsx":"12","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\Results\\Results.tsx":"13"},{"size":331,"mtime":1616873762087,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":913,"mtime":1615640595783,"results":"17","hashOfConfig":"15"},{"size":4821,"mtime":1617633738124,"results":"18","hashOfConfig":"15"},{"size":987,"mtime":1616506520527,"results":"19","hashOfConfig":"15"},{"size":4750,"mtime":1617633693558,"results":"20","hashOfConfig":"15"},{"size":2435,"mtime":1617632595711,"results":"21","hashOfConfig":"15"},{"size":14618,"mtime":1617633692755,"results":"22","hashOfConfig":"15"},{"size":22925,"mtime":1617633738262,"results":"23","hashOfConfig":"15"},{"size":7054,"mtime":1617633691932,"results":"24","hashOfConfig":"15"},{"size":9922,"mtime":1616952355803,"results":"25","hashOfConfig":"15"},{"size":1705,"mtime":1616952708021,"results":"26","hashOfConfig":"15"},{"size":5683,"mtime":1617633738262,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ho9eh0",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\index.tsx",[],["59","60"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\reportWebVitals.ts",[],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\App.tsx",[],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Home\\Home.tsx",["61","62","63"],"import React, { Component } from 'react';\r\nimport { ProgressBar } from 'react-bootstrap';\r\nimport './Home.css';\r\n\r\ninterface HomeProps {\r\n    testName: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    createdTime: string;\r\n    deadline: string;\r\n    testTime: number;\r\n    questionNumber: number;\r\n    xp: number;\r\n}\r\n\r\ninterface HomeState {\r\n    userTestsStatus: {\r\n        completed: number\r\n        notCompleted: number,\r\n        allXp: number,\r\n        error: string\r\n    },\r\n    user: {\r\n        firstName: string,\r\n        lastName: string\r\n    }\r\n}\r\n\r\nexport default class Home extends React.Component<HomeProps, HomeState> {\r\n    constructor(props: HomeProps) {\r\n        super(props);\r\n        this.state = {\r\n            userTestsStatus: {\r\n                completed: 0,\r\n                notCompleted: 0,\r\n                allXp: 0,\r\n                error: \"\"\r\n            },\r\n            user: {\r\n                firstName: \"\",\r\n                lastName: \"\"\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch(`https://localhost:5001/api/users/fetch-from-session`, { method: 'GET', credentials: 'include' })\r\n            .then(function (body) {\r\n                return body.text();\r\n            }).then((response) => {\r\n                fetch(`https://localhost:5001/api/users-tests/status/${response}`, { method: 'GET' })\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n                        this.setState({ userTestsStatus: data });\r\n                    });\r\n                fetch(`https://localhost:5001/api/users/${response}`, { method: 'GET' })\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n                        this.setState({ user: data });\r\n                    });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        type ProgressBarData = {\r\n            min: number; max: number;\r\n        }\r\n        const progressBarData = () => {\r\n            var xp = this.state.userTestsStatus.allXp;\r\n            if (xp < 5000) {\r\n                return { min: 0, max: 5000, minLevel: 1, maxLevel: 2 }\r\n            } else if (xp > 5000 && xp < 10000) {\r\n                return { min: 5000, max: 10000, minLevel: 2, maxLevel: 3 }\r\n            } else if (xp > 10000 && xp < 15000) {\r\n                return { min: 10000, max: 15000, minLevel: 3, maxLevel: 4 }\r\n            } else if (xp > 15000 && xp < 20000) {\r\n                return { min: 15000, max: 20000, minLevel: 4, maxLevel: 5 }\r\n            } else if (xp > 20000 && xp < 25000) {\r\n                return { min: 20000, max: 25000, minLevel: 5, maxLevel: 6 }\r\n            } else if (xp > 25000 && xp < 30000) {\r\n                return { min: 25000, max: 30000, minLevel: 6, maxLevel: 7 }\r\n            } else if (xp > 30000 && xp < 35000) {\r\n                return { min: 30000, max: 35000, minLevel: 7, maxLevel: 8 }\r\n            } else if (xp > 35000 && xp < 40000) {\r\n                return { min: 35000, max: 40000, minLevel: 8, maxLevel: 9 }\r\n            } else {\r\n                return { min: 40000, max: 50000, minLevel: 9, maxLevel: 10 }\r\n            }\r\n        }\r\n\r\n        return (\r\n            this.state.user.firstName == \"\" ? <div className=\"alert alert-danger\" role=\"alert\">Jelentkezz be ha meg szeretnéd nézni a tesztjeidet!</div> :\r\n                <div className=\"home-container\">\r\n                    <div className=\"home-data\">\r\n                        <div className=\"home-name\">{this.state.user.firstName + \" \" + this.state.user.lastName}</div>\r\n                        <div className=\"home-xp-label\">Összegyűjtött pontjaid:</div>\r\n                        <div className=\"home-all-earned-xp\">\r\n                            <div className=\"current-level\">{progressBarData().minLevel}</div>\r\n                            <div className=\"next-level\">{progressBarData().maxLevel}</div>\r\n                            <ProgressBar className=\"home-progress\" animated now={this.state.userTestsStatus.allXp} min={progressBarData().min} max={progressBarData().max} />\r\n                        </div>\r\n                        <div className=\"completed-test-count-container\">\r\n                            <div className=\"complete-img\">✔️</div>\r\n                            <div className=\"complete-text\">{this.state.userTestsStatus.completed} db kitöltött teszted van</div>\r\n                        </div>\r\n                        <div className=\"not-completed-test-count-container\">\r\n                            <div className=\"not-complete-img\">❌</div>\r\n                            <div className=\"not-complete-text\">{this.state.userTestsStatus.notCompleted} db kitöltetlen teszted van</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\common\\Navigation.tsx",[],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\MyTests.tsx",["64","65","66"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\MyTests\\Gameboy\\Gameboy.tsx",["67"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\Authentication\\Authentication.tsx",["68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CreateTest\\CreateTest.tsx",["85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117"],"import React, { Component } from 'react'\r\nimport { Button, Form, OverlayTrigger, Popover, Image, Modal, ListGroup, Row, Col, Spinner } from 'react-bootstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './CreateTest.css';\r\n\r\ninterface CreateTestProps {\r\n}\r\n\r\ninterface CreateTestState {\r\n    description: string;\r\n    userId: string;\r\n    title: string;\r\n    created: string;\r\n    deadline: string;\r\n    questions: [\r\n        {\r\n            id: number\r\n            problem: string;\r\n            answerOne: string;\r\n            answerTwo: string;\r\n            answerThree?: string;\r\n            answerFour?: string;\r\n            timeLimit: number;\r\n            xp: number;\r\n            correctAnswer: number;\r\n        }\r\n    ],\r\n    editedQuestion: number;\r\n    saveModalIsOpen: boolean;\r\n    userToFill: string;\r\n    fillingUsers: string[];\r\n    savingTest: boolean;\r\n    createdTest: boolean;\r\n}\r\n\r\nexport default class CreateTest extends Component<CreateTestProps, CreateTestState> {\r\n\r\n    constructor(props: CreateTestProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            description: '',\r\n            userId: '',\r\n            title: '',\r\n            created: '',\r\n            deadline: '',\r\n            questions: [\r\n                {\r\n                    id: 0,\r\n                    problem: '',\r\n                    answerOne: '',\r\n                    answerTwo: '',\r\n                    answerThree: '',\r\n                    answerFour: '',\r\n                    timeLimit: 0,\r\n                    xp: 0,\r\n                    correctAnswer: 0\r\n                },\r\n            ],\r\n            editedQuestion: 0,\r\n            saveModalIsOpen: false,\r\n            userToFill: '',\r\n            fillingUsers: [],\r\n            savingTest: false,\r\n            createdTest: false\r\n        }\r\n\r\n        this.createTrueFalseQuestion = this.createTrueFalseQuestion.bind(this);\r\n        this.handleQuestionInputs = this.handleQuestionInputs.bind(this);\r\n        this.chooseQuestionToEdit = this.chooseQuestionToEdit.bind(this);\r\n        this.createQuizQuestion = this.createQuizQuestion.bind(this);\r\n        this.addUsersToTheTest = this.addUsersToTheTest.bind(this);\r\n        this.handleSaveInputs = this.handleSaveInputs.bind(this);\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n        this.deleteUser = this.deleteUser.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`https://localhost:44369/api/users/fetch-from-session`, { method: 'GET', credentials: \"include\", mode: 'cors' }).then(function (body) {\r\n            return body.text();\r\n        }).then((response) => {\r\n            this.setState({ userId: response });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.createdTest) {\r\n            return <Redirect to='/' />;\r\n        }\r\n        const selectQuestionType = (\r\n            <Popover id=\"popover\" >\r\n                <Popover.Title as=\"h3\">Milyen típusú kérdés legyen?</Popover.Title>\r\n                <Popover.Content>\r\n                    <Form.Group>\r\n                        <Button className=\"new-question-button w-75\" onClick={this.createQuizQuestion} variant=\"outline-primary\">\r\n                            <Image src=\"/img/quiz_icon.png\" />\r\n                            <p className=\"font-weight-bold\">Kvíz</p>\r\n                            <p>Adj a játékosoknak több válaszlehetőséget, amelyek közül választhatnak</p>\r\n                        </Button>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button className=\"new-question-button w-75\" onClick={this.createTrueFalseQuestion} variant=\"outline-primary\">\r\n                            <Image src=\"/img/true_false_icon.png\" />\r\n                            <p className=\"font-weight-bold\">Igaz-hamis</p>\r\n                            <p>Engedd hogy a játékos döntse el, hogy az állítás igaz vagy hamis</p>\r\n                        </Button>\r\n                    </Form.Group>\r\n\r\n                </Popover.Content>\r\n            </Popover>\r\n        );\r\n\r\n        const questionList = (\r\n            this.state.questions[0].problem.length > 0 || this.state.questions.length > 1 ?\r\n                this.state.questions.map((item, index) => (\r\n                    <div data-key={item.id} onClick={() => this.chooseQuestionToEdit(item.id)} style={{\r\n                        backgroundColor: this.state.editedQuestion == item.id ? '#2b92ff' : 'white',\r\n                    }} className=\"question-list-item\" >\r\n                        <img src=\"/img/trash.png\" width=\"25\" style={{ cursor: 'pointer' }} onClick={() => this.deleteQuestion(index)} />\r\n                        <div data-key={item.id} className=\"question-item-content\" style={{\r\n                            backgroundColor: this.state.editedQuestion == item.id ? 'white' : '#e0efff',\r\n                        }}>\r\n                            <p data-key={item.id} className=\"sidebar-question-number\">{index + 1}</p>\r\n                            <p data-key={item.id} className=\"question-type\">{item.hasOwnProperty(\"answerThree\") ? \"Kvíz\" : \"Igaz-hamis\"}</p>\r\n                            <p data-key={item.id} className=\"font-weight-bold item-question-text\">{item.problem}</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                ))\r\n                : <div data-key=\"0\" onClick={this.chooseQuestionToEdit} style={{ backgroundColor: '#2b92ff' }} className=\"question-list-item\">\r\n                    <img src=\"/img/trash.png\" width=\"25\" style={{ cursor: 'pointer' }} onClick={() => this.deleteQuestion(0)} />\r\n                    <div data-key=\"0\" className=\"question-item-content\" style={{ backgroundColor: 'white' }}>\r\n                        <p data-key=\"0\" className=\"sidebar-question-number\">1</p>\r\n                        <p data-key=\"0\" className=\"question-type\">Kvíz</p>\r\n                        <p data-key=\"0\" className=\"font-weight-bold mt-2\">{this.state.questions[0].problem}</p>\r\n\r\n                    </div>\r\n                </div>\r\n        )\r\n\r\n        return (\r\n            this.state.userId == \"\" ? <div className=\"alert alert-danger\" role=\"alert\">Jelentkezz be hogy tesztet készíthess!</div> :\r\n                <div className=\"edit-container full-height\">\r\n                    <div className=\"sidebar-container\">\r\n                        <div className=\"sidebar\">\r\n                            {questionList}\r\n                            <Form.Group>\r\n                                <OverlayTrigger\r\n                                    rootClose={true} trigger=\"click\" placement=\"right\" overlay={selectQuestionType}>\r\n                                    <Button className=\"new-question-button w-75\" variant=\"primary\">Új kérdés</Button>\r\n                                </OverlayTrigger>\r\n                            </Form.Group>\r\n                        </div>\r\n\r\n                        <Form.Group className=\"save-exit-button w-100\">\r\n                            <Button className=\"cancel-test-button\" variant=\"danger\" onClick={() => this.setState({ createdTest: true })}>Kilépés</Button>\r\n                            <Button variant=\"success\" onClick={this.openModal}> Mentés</Button>{' '}\r\n                        </Form.Group>\r\n                    </div>\r\n\r\n                    <div className=\"create\">\r\n                        <Form.Group className=\"question-text\">\r\n                            <Form.Control type=\"text\" onChange={(e) => { this.handleQuestionInputs(e) }} name=\"problem\" id=\"question-text-input\" placeholder=\"Írd ide a kérdésed...\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.problem}>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <div className=\"question-details\">\r\n                            <Form.Group className=\"time-limit\" controlId=\"formBasicRange\">\r\n                                <Form.Label className=\"time-label\">Idő: </Form.Label>\r\n                                <Form.Label className=\"time-number-label\">{this.state.questions.find(q => q.id == this.state.editedQuestion)?.timeLimit}</Form.Label>\r\n                                <Form.Control min=\"5\" max=\"200\" size=\"lg\" step={5} name=\"timeLimit\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.timeLimit} onChange={(e) => this.handleQuestionInputs(e)} type=\"range\" />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"question-xp\" controlId=\"formBasicRange\">\r\n                                <Form.Label className=\"xp-label\">Xp: </Form.Label>\r\n                                <Form.Label className=\"xp-slider-number-label\">{this.state.questions.find(q => q.id == this.state.editedQuestion)?.xp}</Form.Label>\r\n                                <Form.Control min=\"0\" max=\"1000\" size=\"sm\" step={100} name=\"xp\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.xp} onChange={(e) => this.handleQuestionInputs(e)} type=\"range\" />\r\n                            </Form.Group>\r\n                        </div>\r\n\r\n                        {this.state.questions.find(q => q.id == this.state.editedQuestion)?.hasOwnProperty(\"answerThree\") ?\r\n                            <Form.Group className=\"answers\">\r\n                                <Form.Group className=\"answers-one\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerOne} name=\"answerOne\" placeholder=\"Első válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 0 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"0\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-two\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerTwo} name=\"answerTwo\" placeholder=\"Második válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 1 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"1\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-three\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} name=\"answerThree\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerThree} placeholder=\"Harmadik válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 2 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"2\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-four\">\r\n                                    <Form.Control onChange={(e) => { this.handleQuestionInputs(e) }} name=\"answerFour\" value={this.state.questions.find(q => q.id == this.state.editedQuestion)?.answerFour} placeholder=\"Negyedik válasz\" />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 3 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"3\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form.Group> :\r\n                            <Form.Group className=\"answers\">\r\n                                <Form.Group className=\"answers-one\">\r\n                                    <Form.Label className=\"answers-true-label\">Igaz</Form.Label>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 0 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"0\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"answers-two\">\r\n                                    <Form.Label className=\"answers-false-label\">Hamis</Form.Label>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        checked={this.state.questions.find(q => q.id == this.state.editedQuestion)?.correctAnswer == 1 ? true : false}\r\n                                        name=\"answers-radio\"\r\n                                        id=\"1\"\r\n                                        onChange={(e) => { this.handleQuestionInputs(e) }}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Form.Group>\r\n                        }\r\n                    </div>\r\n\r\n                    <Modal\r\n                        show={this.state.saveModalIsOpen}\r\n                        size=\"lg\"\r\n                        aria-labelledby=\"contained-modal-title-vcenter\"\r\n                        centered\r\n                        onHide={this.closeModal}\r\n                    >\r\n                        <Modal.Header closeButton >\r\n                            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                                Teszt mentése\r\n                        </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Teszt címe:</Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"title\" placeholder=\"Cím\" onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"user-email-input\">\r\n                                        <Form.Label>Kitöltők hozzáadása:</Form.Label>\r\n                                        <Form.Control type=\"text\" name=\"userToFill\" value={this.state.userToFill} placeholder=\"E-mail cím\" onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                        <Button variant=\"success\" className=\"add-user-button\" onClick={this.addUsersToTheTest}> Hozzáadás</Button>{' '}\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"test-date-input\">\r\n                                        <Form.Label>Kitöltési határidő:</Form.Label>\r\n                                        <Form.Control type=\"date\" name='deadline' onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Leírás</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} name='description' onChange={(e) => { this.handleSaveInputs(e) }} />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col className=\"added-users\">\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item variant=\"primary\">Hozzáadott felhasználók:</ListGroup.Item>\r\n                                        {this.state.fillingUsers.map((item, index) => (\r\n                                            <ListGroup.Item>{item} <img\r\n                                                src=\"/img/trash.png\"\r\n                                                width=\"25\"\r\n                                                // data-key={index}\r\n                                                style={{ float: 'right', cursor: 'pointer' }}\r\n                                                onClick={() => this.deleteUser(index)}\r\n                                            /></ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            {this.state.savingTest ? <Spinner animation=\"border\" role=\"status\">\r\n                                <span className=\"sr-only\">Loading...</span>\r\n                            </Spinner> :\r\n                                <>\r\n                                    <Button onClick={this.closeModal}>Bezárás</Button>\r\n                                    <Button variant=\"success\" onClick={() => this.saveTest()}>Mentés</Button>\r\n                                </>\r\n                            }\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </div >\r\n        )\r\n    }\r\n\r\n    openModal = () => this.setState({ saveModalIsOpen: true });\r\n    closeModal = () => this.setState({ saveModalIsOpen: false });\r\n\r\n    createQuizQuestion() {\r\n        this.state.questions.push({\r\n            id: Math.max.apply(Math, this.state.questions.map(function (o) { return o.id; })) + 1,\r\n            problem: '',\r\n            answerOne: '',\r\n            answerTwo: '',\r\n            answerThree: '',\r\n            answerFour: '',\r\n            timeLimit: 0,\r\n            xp: 0,\r\n            correctAnswer: 0\r\n        })\r\n\r\n        document.body.click()\r\n        this.forceUpdate();\r\n    }\r\n\r\n    createTrueFalseQuestion() {\r\n        this.state.questions.push({\r\n            id: Math.max.apply(Math, this.state.questions.map(function (o) { return o.id; })) + 1,\r\n            problem: '',\r\n            answerOne: '',\r\n            answerTwo: '',\r\n            timeLimit: 0,\r\n            xp: 0,\r\n            correctAnswer: 0\r\n        })\r\n\r\n        document.body.click()\r\n        this.forceUpdate();\r\n    }\r\n\r\n    chooseQuestionToEdit(id: any) {\r\n        try {\r\n            this.setState({ editedQuestion: id });\r\n        } catch (error) {\r\n            this.setState({ editedQuestion: this.state.questions[0].id });\r\n        }\r\n        this.forceUpdate();\r\n\r\n    }\r\n\r\n    deleteQuestion(arg: any) {\r\n        var questions: any = [...this.state.questions]; // make a separate copy of the array\r\n        questions.splice(arg, 1);\r\n        this.setState({ questions: questions });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    deleteUser(arg: any) {\r\n        var array = [...this.state.fillingUsers]; // make a separate copy of the array\r\n        array.splice(arg, 1);\r\n        this.setState({ fillingUsers: array });\r\n\r\n    }\r\n\r\n    slidebarQuestions() {\r\n        if (this.state.questions[0].problem != \"\") {\r\n            return (\r\n                this.state.questions.map(q =>\r\n                    <div className=\"question-list-item\">\r\n                        {q.problem}\r\n                    </div>\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    addUsersToTheTest() {\r\n        this.setState(previousState => ({\r\n            fillingUsers: [...previousState.fillingUsers, this.state.userToFill],\r\n            userToFill: \"\"\r\n        }));\r\n    }\r\n\r\n    handleSaveInputs(e: { target: { name: any; value: any; }; }) {\r\n        const { name, value } = e.target;\r\n\r\n        const newState = { [name]: value } as Pick<CreateTestState, keyof CreateTestState>;\r\n        this.setState(newState);\r\n    }\r\n\r\n    handleQuestionInputs(e: { currentTarget: { value: any; }; preventDefault: () => void; target: { name: string | number; value: string | number; id: string | number } }) {\r\n        const { name, value, id } = e.target;\r\n\r\n        if (value == \"on\") {\r\n            var questions: any = [...this.state.questions];\r\n            questions.find((q: { id: number; }) => q.id == this.state.editedQuestion).correctAnswer = id;\r\n        } else {\r\n            var questions: any = [...this.state.questions];\r\n            questions.find((q: { id: number; }) => q.id == this.state.editedQuestion)[name] = value;\r\n        }\r\n        this.setState({ questions });\r\n    }\r\n\r\n    async saveTest() {\r\n        this.setState({ ...this.state, savingTest: true });\r\n        let questions = this.state.questions.map(({ id, ...keepAttrs }) => keepAttrs)\r\n\r\n        await fetch('https://localhost:44369/api/tests', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                UserId: this.state.userId,\r\n                Title: this.state.title,\r\n                Description: this.state.description,\r\n                Questions: questions,\r\n                Deadline: this.state.deadline\r\n            })\r\n        }).then(response => {\r\n            if (response.ok) return response.json();\r\n        }).then(async json => {\r\n            await this.state.fillingUsers.forEach(async (email) => {\r\n                await fetch('https://localhost:44369/api/users-tests', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        User: {\r\n                            Email: email\r\n                        },\r\n                        TestId: json.id\r\n                    })\r\n\r\n                });\r\n            });\r\n            this.setState({ ...this.state, savingTest: false, createdTest: true });\r\n        })\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\CompleteTest.tsx",["118","119","120"],"A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\Question\\Question.tsx",["121","122","123","124","125","126","127","128","129","130","131"],"import React, { Component, useEffect } from 'react'\r\nimport { Alert, Form } from 'react-bootstrap';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport confetti from 'canvas-confetti';\r\nimport './Question.css';\r\n\r\ninterface QuestionProps {\r\n    id: number;\r\n    questionNumber: number;\r\n    problem: string;\r\n    answerOne: string;\r\n    answerTwo: string;\r\n    answerThree?: string;\r\n    answerFour?: string;\r\n    timeLimit: number;\r\n    xp: number;\r\n    correctAnswer: number;\r\n    passAnswerData: (answer: number, questionId: number, responseTime: number, earnedXp: number) => void;\r\n}\r\n\r\ninterface QuestionState {\r\n    secondsLeft: number;\r\n    responseTime: number;\r\n    earnedXp: number;\r\n    disableClick: boolean;\r\n    questionBgColors: string[];\r\n}\r\n\r\nexport default class Question extends React.Component<QuestionProps, QuestionState> {\r\n    constructor(prop: QuestionProps) {\r\n        super(prop);\r\n\r\n        this.state = {\r\n            //                 answer 1   answer 2   answer 3   answer 4   background\r\n            questionBgColors: [\"#66a3ff\", \"#FF6868\", \"#FFAB2C\", \"#68C95C\", \"#e0efff\"],\r\n            secondsLeft: -1,\r\n            responseTime: -1,\r\n            earnedXp: 0,\r\n            disableClick: false\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: { problem: string; }) {\r\n        this.setState({ secondsLeft: this.props.timeLimit });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"flex\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"none\";\r\n        this.setState({ secondsLeft: this.props.timeLimit });\r\n\r\n        let intervalId = setInterval(() => {\r\n            const { secondsLeft } = this.state\r\n\r\n            if (secondsLeft > 0) {\r\n                this.setState({ secondsLeft: secondsLeft - 1 });\r\n            } else if (secondsLeft == 0) {\r\n                this.timeOut();\r\n                clearInterval(intervalId);\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    render() {\r\n        const { problem, answerOne, answerTwo, answerThree, answerFour, timeLimit, xp, correctAnswer } = this.props;\r\n\r\n\r\n        return (\r\n            <div style={{ backgroundColor: this.state.questionBgColors[4] }} className=\"create question-container\">\r\n                <Form.Group className=\"question-text\">\r\n                    <Form.Label>\r\n                        {problem}\r\n                    </Form.Label>\r\n                    <Form.Group className=\"asnwer-result popout\">\r\n                        {this.state.earnedXp > 0 ? <><Alert className=\"good-result\" variant=\"success\">\r\n                            <p>Helyes válasz!</p>\r\n                            <p>{this.state.earnedXp} XP</p>\r\n                        </Alert> </> : null}\r\n\r\n                        {this.state.earnedXp == -1 ? <Alert className=\"bad-result-text\" variant=\"danger\">\r\n                            Rossz válasz 😞\r\n                    </Alert> : null}\r\n                    </Form.Group>\r\n                </Form.Group >\r\n\r\n\r\n                <div className=\"question-details\">\r\n                    <Form.Group className=\"time-limit\" controlId=\"formBasicRange\">\r\n                        <Form.Label className=\"time-label\">\r\n                            {this.state.disableClick == false ? <CountdownCircleTimer\r\n                                isPlaying\r\n                                duration={this.props.timeLimit}\r\n                                colors={[\r\n                                    ['#004777', 0.33],\r\n                                    ['#F7B801', 0.33],\r\n                                    ['#A30000', 0.33],\r\n                                ]}>\r\n                                {({ remainingTime }) => remainingTime}\r\n                            </CountdownCircleTimer> : null}\r\n\r\n                        </Form.Label>\r\n                    </Form.Group>\r\n                </div>\r\n\r\n                {\r\n                    answerFour != null ?\r\n                        <Form.Group className=\"answers\">\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[0] }} className=\"play-answers-one\" id=\"0\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answer-text\">{answerOne}</Form.Label>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[1] }} className=\"play-answers-two\" id=\"1\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answer-text\">{answerTwo}</Form.Label>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[2] }} className=\"play-answers-three\" id=\"2\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answer-text\">{answerThree}</Form.Label>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[3] }} className=\"play-answers-four\" id=\"3\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answer-text\">{answerFour}</Form.Label>\r\n                            </Form.Group>\r\n                        </Form.Group> :\r\n                        <Form.Group className=\"answers\">\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[0] }} className=\"play-answers-one\" id=\"0\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answers-true-label\">Igaz</Form.Label>\r\n                            </Form.Group>\r\n                            <Form.Group style={{ backgroundColor: this.state.questionBgColors[1] }} className=\"play-answers-two\" id=\"1\" onClick={this.handleAnswerInput}>\r\n                                <Form.Label className=\"answers-false-label\">Hamis</Form.Label>\r\n                            </Form.Group>\r\n                        </Form.Group>\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n\r\n    handleAnswerInput = async (e: React.MouseEvent<HTMLElement>) => {\r\n        const { correctAnswer } = this.props;\r\n        const { disableClick } = this.state;\r\n        this.setState({ disableClick: true });\r\n        if (!disableClick) {\r\n            if (+((e.target as HTMLTextAreaElement).id) != correctAnswer) {\r\n                this.badAnswer(+((e.target as HTMLTextAreaElement).id))\r\n            } else {\r\n                this.goodAnswer(+((e.target as HTMLTextAreaElement).id));\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    async timeOut() {\r\n        const { questionNumber } = this.props;\r\n        this.setState({ disableClick: true, earnedXp: -1 });\r\n\r\n        const newquestionBgColors = this.state.questionBgColors.slice()\r\n        for (let i = 0; i < this.state.questionBgColors.length - 1; i++) {\r\n            newquestionBgColors[i] = \"#ff1919\"\r\n        }\r\n        newquestionBgColors[this.props.correctAnswer] = \"#09bd57\"\r\n        newquestionBgColors[4] = \"#ffb8b8\"\r\n        this.setState({ questionBgColors: newquestionBgColors })\r\n\r\n        await this.afterQuestionTimeout();\r\n        this.props.passAnswerData(-1, questionNumber, -1, 0);\r\n    }\r\n\r\n    async badAnswer(answer: number) {\r\n        const { questionNumber } = this.props;\r\n        this.setState({ responseTime: this.props.timeLimit - this.state.secondsLeft, disableClick: true, earnedXp: -1 });\r\n        this.setState({ secondsLeft: -1 });\r\n\r\n        const newquestionBgColors = this.state.questionBgColors.slice()\r\n        for (let i = 0; i < this.state.questionBgColors.length - 1; i++) {\r\n            newquestionBgColors[i] = \"#ff1919\"\r\n        }\r\n        newquestionBgColors[answer] = \"#ff9494\";\r\n        newquestionBgColors[this.props.correctAnswer] = \"#09bd57\"\r\n        newquestionBgColors[4] = \"#ffb8b8\"\r\n        this.setState({ questionBgColors: newquestionBgColors })\r\n\r\n        await this.afterQuestionTimeout();\r\n        this.props.passAnswerData(answer, questionNumber, this.state.responseTime, 0);\r\n    }\r\n\r\n    async goodAnswer(answer: number) {\r\n        const { questionNumber, timeLimit, xp } = this.props;\r\n        const { secondsLeft, questionBgColors } = this.state;\r\n\r\n        this.setState({ disableClick: true });\r\n        let earnedXp = this.props.timeLimit - this.state.secondsLeft == -1 || this.props.timeLimit - this.state.secondsLeft == 0 ? xp : Math.floor((((timeLimit - secondsLeft) / timeLimit) / 2) * xp);\r\n\r\n        this.setState({ earnedXp: earnedXp });\r\n        this.setState({ responseTime: this.props.timeLimit - this.state.secondsLeft });\r\n        this.setState({ secondsLeft: -1 });\r\n\r\n        const newquestionBgColors = questionBgColors.slice()\r\n        for (let i = 0; i < questionBgColors.length - 1; i++) {\r\n            newquestionBgColors[i] = \"#ff1919\"\r\n        }\r\n        newquestionBgColors[answer] = \"#09bd57\"\r\n        newquestionBgColors[4] = \"#e8ffea\"\r\n        this.setState({ questionBgColors: newquestionBgColors })\r\n\r\n        this.tossConfetti()\r\n        await this.afterQuestionTimeout();\r\n        this.props.passAnswerData(answer, questionNumber, this.state.responseTime, earnedXp)\r\n    }\r\n\r\n    afterQuestionTimeout = () => {\r\n        return new Promise(res => setTimeout(res, 3000));\r\n    }\r\n\r\n\r\n    tossConfetti = () => {\r\n        confetti({\r\n            spread: 50,\r\n            startVelocity: 55,\r\n        });\r\n        confetti({\r\n            spread: 80,\r\n        });\r\n        confetti({\r\n            spread: 120,\r\n            startVelocity: 25,\r\n            decay: 0.92,\r\n            scalar: 1.2\r\n        });\r\n        confetti({\r\n            spread: 150,\r\n            decay: 0.91,\r\n            scalar: 0.8\r\n        });\r\n    }\r\n}","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\QuestionType\\QuestionType.tsx",["132","133","134"],"import React from 'react'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport './QuestionType.css';\r\n\r\ninterface QuestionTypeProps {\r\n    problem: string;\r\n    isQuestionQuiz: boolean;\r\n}\r\n\r\n\r\nexport default class extends React.Component<QuestionTypeProps>{\r\n    componentDidMount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"none\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Array.from(document.getElementsByClassName('navbar') as HTMLCollectionOf<HTMLElement>)![0].style.display = \"flex\";\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"question-type-container\" >\r\n                <div className=\"row\">\r\n                    <div className=\"question-type-img\">\r\n                        {this.props.isQuestionQuiz ? <img src=\"/img/quiz_icon.png\" /> : <img src=\"/img/true_false_icon.png\" />}\r\n                    </div>\r\n                    <div className=\"question-type-text\">\r\n                        {this.props.problem}\r\n                    </div>\r\n                    <div className=\"question-type-timer\">\r\n                        <CountdownCircleTimer\r\n                            isPlaying\r\n                            duration={3}\r\n                            colors={[\r\n                                ['#004777', 0.33],\r\n                                ['#F7B801', 0.33],\r\n                                ['#A30000', 0.33],\r\n                            ]}>\r\n                            {({ remainingTime }) => remainingTime}\r\n                        </CountdownCircleTimer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","A:\\Dokumentumok\\Egyetem\\5_felev\\Szakdolgozat_1\\szakdolgozat_frontend\\test-me\\src\\components\\CompleteTest\\Results\\Results.tsx",["135"],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":1,"column":17,"nodeType":"142","messageId":"143","endLine":1,"endColumn":26},{"ruleId":"140","severity":1,"message":"144","line":66,"column":14,"nodeType":"142","messageId":"143","endLine":66,"endColumn":29},{"ruleId":"145","severity":1,"message":"146","line":93,"column":39,"nodeType":"147","messageId":"148","endLine":93,"endColumn":41},{"ruleId":"140","severity":1,"message":"149","line":2,"column":36,"nodeType":"142","messageId":"143","endLine":2,"endColumn":43},{"ruleId":"145","severity":1,"message":"146","line":97,"column":31,"nodeType":"147","messageId":"148","endLine":97,"endColumn":33},{"ruleId":"145","severity":1,"message":"146","line":98,"column":50,"nodeType":"147","messageId":"148","endLine":98,"endColumn":52},{"ruleId":"140","severity":1,"message":"150","line":1,"column":17,"nodeType":"142","messageId":"143","endLine":1,"endColumn":26},{"ruleId":"145","severity":1,"message":"146","line":69,"column":47,"nodeType":"147","messageId":"148","endLine":69,"endColumn":49},{"ruleId":"145","severity":1,"message":"146","line":69,"column":97,"nodeType":"147","messageId":"148","endLine":69,"endColumn":99},{"ruleId":"145","severity":1,"message":"146","line":69,"column":147,"nodeType":"147","messageId":"148","endLine":69,"endColumn":149},{"ruleId":"145","severity":1,"message":"146","line":69,"column":199,"nodeType":"147","messageId":"148","endLine":69,"endColumn":201},{"ruleId":"145","severity":1,"message":"146","line":69,"column":250,"nodeType":"147","messageId":"148","endLine":69,"endColumn":252},{"ruleId":"145","severity":1,"message":"146","line":69,"column":309,"nodeType":"147","messageId":"148","endLine":69,"endColumn":311},{"ruleId":"145","severity":1,"message":"146","line":69,"column":371,"nodeType":"147","messageId":"148","endLine":69,"endColumn":373},{"ruleId":"145","severity":1,"message":"146","line":69,"column":433,"nodeType":"147","messageId":"148","endLine":69,"endColumn":435},{"ruleId":"145","severity":1,"message":"146","line":72,"column":52,"nodeType":"147","messageId":"148","endLine":72,"endColumn":54},{"ruleId":"145","severity":1,"message":"146","line":72,"column":114,"nodeType":"147","messageId":"148","endLine":72,"endColumn":116},{"ruleId":"145","severity":1,"message":"146","line":156,"column":59,"nodeType":"147","messageId":"148","endLine":156,"endColumn":61},{"ruleId":"145","severity":1,"message":"146","line":170,"column":67,"nodeType":"147","messageId":"148","endLine":170,"endColumn":69},{"ruleId":"145","severity":1,"message":"146","line":201,"column":89,"nodeType":"147","messageId":"148","endLine":201,"endColumn":91},{"ruleId":"145","severity":1,"message":"146","line":205,"column":89,"nodeType":"147","messageId":"148","endLine":205,"endColumn":91},{"ruleId":"145","severity":1,"message":"151","line":257,"column":79,"nodeType":"147","messageId":"148","endLine":257,"endColumn":81},{"ruleId":"145","severity":1,"message":"151","line":265,"column":71,"nodeType":"147","messageId":"148","endLine":265,"endColumn":73},{"ruleId":"145","severity":1,"message":"146","line":268,"column":79,"nodeType":"147","messageId":"148","endLine":268,"endColumn":81},{"ruleId":"145","severity":1,"message":"146","line":117,"column":68,"nodeType":"147","messageId":"148","endLine":117,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":119,"column":25,"nodeType":"154","endLine":119,"endColumn":137},{"ruleId":"145","severity":1,"message":"146","line":121,"column":72,"nodeType":"147","messageId":"148","endLine":121,"endColumn":74},{"ruleId":"152","severity":1,"message":"153","line":131,"column":21,"nodeType":"154","endLine":131,"endColumn":129},{"ruleId":"145","severity":1,"message":"146","line":142,"column":31,"nodeType":"147","messageId":"148","endLine":142,"endColumn":33},{"ruleId":"145","severity":1,"message":"146","line":163,"column":225,"nodeType":"147","messageId":"148","endLine":163,"endColumn":227},{"ruleId":"145","severity":1,"message":"146","line":170,"column":112,"nodeType":"147","messageId":"148","endLine":170,"endColumn":114},{"ruleId":"145","severity":1,"message":"146","line":171,"column":144,"nodeType":"147","messageId":"148","endLine":171,"endColumn":146},{"ruleId":"145","severity":1,"message":"146","line":175,"column":117,"nodeType":"147","messageId":"148","endLine":175,"endColumn":119},{"ruleId":"145","severity":1,"message":"146","line":176,"column":140,"nodeType":"147","messageId":"148","endLine":176,"endColumn":142},{"ruleId":"145","severity":1,"message":"146","line":180,"column":62,"nodeType":"147","messageId":"148","endLine":180,"endColumn":64},{"ruleId":"145","severity":1,"message":"146","line":183,"column":145,"nodeType":"147","messageId":"148","endLine":183,"endColumn":147},{"ruleId":"145","severity":1,"message":"146","line":186,"column":86,"nodeType":"147","messageId":"148","endLine":186,"endColumn":88},{"ruleId":"145","severity":1,"message":"146","line":186,"column":131,"nodeType":"147","messageId":"148","endLine":186,"endColumn":133},{"ruleId":"145","severity":1,"message":"146","line":193,"column":145,"nodeType":"147","messageId":"148","endLine":193,"endColumn":147},{"ruleId":"145","severity":1,"message":"146","line":196,"column":86,"nodeType":"147","messageId":"148","endLine":196,"endColumn":88},{"ruleId":"145","severity":1,"message":"146","line":196,"column":131,"nodeType":"147","messageId":"148","endLine":196,"endColumn":133},{"ruleId":"145","severity":1,"message":"146","line":203,"column":164,"nodeType":"147","messageId":"148","endLine":203,"endColumn":166},{"ruleId":"145","severity":1,"message":"146","line":206,"column":86,"nodeType":"147","messageId":"148","endLine":206,"endColumn":88},{"ruleId":"145","severity":1,"message":"146","line":206,"column":131,"nodeType":"147","messageId":"148","endLine":206,"endColumn":133},{"ruleId":"145","severity":1,"message":"146","line":213,"column":163,"nodeType":"147","messageId":"148","endLine":213,"endColumn":165},{"ruleId":"145","severity":1,"message":"146","line":216,"column":86,"nodeType":"147","messageId":"148","endLine":216,"endColumn":88},{"ruleId":"145","severity":1,"message":"146","line":216,"column":131,"nodeType":"147","messageId":"148","endLine":216,"endColumn":133},{"ruleId":"145","severity":1,"message":"146","line":228,"column":86,"nodeType":"147","messageId":"148","endLine":228,"endColumn":88},{"ruleId":"145","severity":1,"message":"146","line":228,"column":131,"nodeType":"147","messageId":"148","endLine":228,"endColumn":133},{"ruleId":"145","severity":1,"message":"146","line":238,"column":86,"nodeType":"147","messageId":"148","endLine":238,"endColumn":88},{"ruleId":"145","severity":1,"message":"146","line":238,"column":131,"nodeType":"147","messageId":"148","endLine":238,"endColumn":133},{"ruleId":"152","severity":1,"message":"153","line":285,"column":68,"nodeType":"154","endLine":291,"endColumn":47},{"ruleId":"145","severity":1,"message":"151","line":372,"column":45,"nodeType":"147","messageId":"148","endLine":372,"endColumn":47},{"ruleId":"145","severity":1,"message":"146","line":400,"column":19,"nodeType":"147","messageId":"148","endLine":400,"endColumn":21},{"ruleId":"145","severity":1,"message":"146","line":402,"column":57,"nodeType":"147","messageId":"148","endLine":402,"endColumn":59},{"ruleId":"155","severity":1,"message":"156","line":404,"column":17,"nodeType":"142","messageId":"157","endLine":404,"endColumn":31},{"ruleId":"145","severity":1,"message":"146","line":405,"column":57,"nodeType":"147","messageId":"148","endLine":405,"endColumn":59},{"ruleId":"140","severity":1,"message":"141","line":2,"column":17,"nodeType":"142","messageId":"143","endLine":2,"endColumn":26},{"ruleId":"145","severity":1,"message":"151","line":121,"column":56,"nodeType":"147","messageId":"148","endLine":121,"endColumn":58},{"ruleId":"145","severity":1,"message":"146","line":143,"column":39,"nodeType":"147","messageId":"148","endLine":143,"endColumn":41},{"ruleId":"140","severity":1,"message":"141","line":1,"column":17,"nodeType":"142","messageId":"143","endLine":1,"endColumn":26},{"ruleId":"140","severity":1,"message":"158","line":1,"column":28,"nodeType":"142","messageId":"143","endLine":1,"endColumn":37},{"ruleId":"145","severity":1,"message":"146","line":60,"column":36,"nodeType":"147","messageId":"148","endLine":60,"endColumn":38},{"ruleId":"140","severity":1,"message":"159","line":68,"column":73,"nodeType":"142","messageId":"143","endLine":68,"endColumn":82},{"ruleId":"140","severity":1,"message":"160","line":68,"column":84,"nodeType":"142","messageId":"143","endLine":68,"endColumn":86},{"ruleId":"140","severity":1,"message":"161","line":68,"column":88,"nodeType":"142","messageId":"143","endLine":68,"endColumn":101},{"ruleId":"145","severity":1,"message":"146","line":83,"column":46,"nodeType":"147","messageId":"148","endLine":83,"endColumn":48},{"ruleId":"145","severity":1,"message":"146","line":93,"column":54,"nodeType":"147","messageId":"148","endLine":93,"endColumn":56},{"ruleId":"145","severity":1,"message":"151","line":145,"column":57,"nodeType":"147","messageId":"148","endLine":145,"endColumn":59},{"ruleId":"145","severity":1,"message":"146","line":194,"column":70,"nodeType":"147","messageId":"148","endLine":194,"endColumn":72},{"ruleId":"145","severity":1,"message":"146","line":194,"column":125,"nodeType":"147","messageId":"148","endLine":194,"endColumn":127},{"ruleId":"162","severity":1,"message":"163","line":11,"column":1,"nodeType":"164","endLine":45,"endColumn":2},{"ruleId":"152","severity":1,"message":"153","line":24,"column":54,"nodeType":"154","endLine":24,"endColumn":86},{"ruleId":"152","severity":1,"message":"153","line":24,"column":89,"nodeType":"154","endLine":24,"endColumn":127},{"ruleId":"140","severity":1,"message":"165","line":2,"column":16,"nodeType":"142","messageId":"143","endLine":2,"endColumn":24},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'ProgressBarData' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Spinner' is defined but never used.","'ReactNode' is defined but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-redeclare","'questions' is already defined.","redeclared","'useEffect' is defined but never used.","'timeLimit' is assigned a value but never used.","'xp' is assigned a value but never used.","'correctAnswer' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","'Redirect' is defined but never used.","no-global-assign","no-unsafe-negation"]